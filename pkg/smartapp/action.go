// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Action A definition of the action to be taken when button is activated.
// swagger:model Action
type Action struct {

	// execute
	Execute *ExecuteAction `json:"execute,omitempty"`

	// launch plugin
	LaunchPlugin *LaunchPluginAction `json:"launchPlugin,omitempty"`

	// type
	Type ActionType `json:"type,omitempty"`
}

// Validate validates this action
func (m *Action) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchPlugin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Action) validateExecute(formats strfmt.Registry) error {

	if swag.IsZero(m.Execute) { // not required
		return nil
	}

	if m.Execute != nil {
		if err := m.Execute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute")
			}
			return err
		}
	}

	return nil
}

func (m *Action) validateLaunchPlugin(formats strfmt.Registry) error {

	if swag.IsZero(m.LaunchPlugin) { // not required
		return nil
	}

	if m.LaunchPlugin != nil {
		if err := m.LaunchPlugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launchPlugin")
			}
			return err
		}
	}

	return nil
}

func (m *Action) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Action) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Action) UnmarshalBinary(b []byte) error {
	var res Action
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
