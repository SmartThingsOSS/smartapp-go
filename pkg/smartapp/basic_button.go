// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BasicButton A button definition for a Basic V1 template.
// swagger:model BasicButton
type BasicButton struct {

	// icon button
	IconButton *BasicIconButton `json:"iconButton,omitempty"`

	// text button
	TextButton *BasicTextButton `json:"textButton,omitempty"`

	// type
	Type BasicButtonType `json:"type,omitempty"`
}

// Validate validates this basic button
func (m *BasicButton) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIconButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BasicButton) validateIconButton(formats strfmt.Registry) error {

	if swag.IsZero(m.IconButton) { // not required
		return nil
	}

	if m.IconButton != nil {
		if err := m.IconButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iconButton")
			}
			return err
		}
	}

	return nil
}

func (m *BasicButton) validateTextButton(formats strfmt.Registry) error {

	if swag.IsZero(m.TextButton) { // not required
		return nil
	}

	if m.TextButton != nil {
		if err := m.TextButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textButton")
			}
			return err
		}
	}

	return nil
}

func (m *BasicButton) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BasicButton) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicButton) UnmarshalBinary(b []byte) error {
	var res BasicButton
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
