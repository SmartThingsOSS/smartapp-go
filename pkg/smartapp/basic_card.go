// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BasicCard Data requirements for a Basic V1 card template.
// swagger:model BasicCard
type BasicCard struct {

	// bg image
	BgImage *BasicBackgroundImage `json:"bgImage,omitempty"`

	// body
	Body *BasicBody `json:"body,omitempty"`

	// A list of buttons to render and buttons must be of the same type.
	// Max Items: 3
	Buttons []*BasicButton `json:"buttons"`

	// An title icon url for card. A HTTPS URL is required.
	// Max Length: 250
	// Format: uri
	IconURL strfmt.URI `json:"iconUrl,omitempty"`

	// name of the card
	// Max Length: 100
	Name string `json:"name,omitempty"`
}

// Validate validates this basic card
func (m *BasicCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateButtons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BasicCard) validateBgImage(formats strfmt.Registry) error {

	if swag.IsZero(m.BgImage) { // not required
		return nil
	}

	if m.BgImage != nil {
		if err := m.BgImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bgImage")
			}
			return err
		}
	}

	return nil
}

func (m *BasicCard) validateBody(formats strfmt.Registry) error {

	if swag.IsZero(m.Body) { // not required
		return nil
	}

	if m.Body != nil {
		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *BasicCard) validateButtons(formats strfmt.Registry) error {

	if swag.IsZero(m.Buttons) { // not required
		return nil
	}

	iButtonsSize := int64(len(m.Buttons))

	if err := validate.MaxItems("buttons", "body", iButtonsSize, 3); err != nil {
		return err
	}

	for i := 0; i < len(m.Buttons); i++ {
		if swag.IsZero(m.Buttons[i]) { // not required
			continue
		}

		if m.Buttons[i] != nil {
			if err := m.Buttons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buttons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BasicCard) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.IconURL) { // not required
		return nil
	}

	if err := validate.MaxLength("iconUrl", "body", string(m.IconURL), 250); err != nil {
		return err
	}

	if err := validate.FormatOf("iconUrl", "body", "uri", m.IconURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BasicCard) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BasicCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicCard) UnmarshalBinary(b []byte) error {
	var res BasicCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
