// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BasicIconButton A text button definition for a basic template.
// swagger:model BasicIconButton
type BasicIconButton struct {

	// action
	Action *Action `json:"action,omitempty"`

	// A default icon image url. HTTPS url required.
	// Max Length: 250
	// Format: uri
	IconURL strfmt.URI `json:"iconUrl,omitempty"`

	// The name of the button
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// position
	Position BasicButtonPosition `json:"position,omitempty"`
}

// Validate validates this basic icon button
func (m *BasicIconButton) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BasicIconButton) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if m.Action != nil {
		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *BasicIconButton) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.IconURL) { // not required
		return nil
	}

	if err := validate.MaxLength("iconUrl", "body", string(m.IconURL), 250); err != nil {
		return err
	}

	if err := validate.FormatOf("iconUrl", "body", "uri", m.IconURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BasicIconButton) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *BasicIconButton) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := m.Position.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("position")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BasicIconButton) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicIconButton) UnmarshalBinary(b []byte) error {
	var res BasicIconButton
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
