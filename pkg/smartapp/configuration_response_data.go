// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConfigurationResponseData Expected response for a Configuration lifecycle execution.  ConfigurationResponseData follows a compositional
// structure.
// * When a request is made for the INITIALIZE phase, a InitializeInstall model should be returned.
// * When a request is made for the PAGE phase, a Page model should be returned.
//
// swagger:model ConfigurationResponseData
type ConfigurationResponseData struct {

	// initialize
	Initialize *InitializeSetting `json:"initialize,omitempty"`

	// page
	Page *Page `json:"page,omitempty"`
}

// Validate validates this configuration response data
func (m *ConfigurationResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationResponseData) validateInitialize(formats strfmt.Registry) error {

	if swag.IsZero(m.Initialize) { // not required
		return nil
	}

	if m.Initialize != nil {
		if err := m.Initialize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialize")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationResponseData) validatePage(formats strfmt.Registry) error {

	if swag.IsZero(m.Page) { // not required
		return nil
	}

	if m.Page != nil {
		if err := m.Page.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationResponseData) UnmarshalBinary(b []byte) error {
	var res ConfigurationResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
