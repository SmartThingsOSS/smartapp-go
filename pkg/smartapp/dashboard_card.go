// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardCard payload of dashboard card
// swagger:model DashboardCard
type DashboardCard struct {

	// basic v1
	BasicV1 *BasicCard `json:"basicV1,omitempty"`

	// A unique identifier for a card of service
	// Required: true
	CardID *string `json:"cardId"`

	// free form
	FreeForm *FreeFormCard `json:"freeForm,omitempty"`

	// template Id
	// Required: true
	TemplateID DashboardCardTemplate `json:"templateId"`
}

// Validate validates this dashboard card
func (m *DashboardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasicV1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardCard) validateBasicV1(formats strfmt.Registry) error {

	if swag.IsZero(m.BasicV1) { // not required
		return nil
	}

	if m.BasicV1 != nil {
		if err := m.BasicV1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basicV1")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardCard) validateCardID(formats strfmt.Registry) error {

	if err := validate.Required("cardId", "body", m.CardID); err != nil {
		return err
	}

	return nil
}

func (m *DashboardCard) validateFreeForm(formats strfmt.Registry) error {

	if swag.IsZero(m.FreeForm) { // not required
		return nil
	}

	if m.FreeForm != nil {
		if err := m.FreeForm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeForm")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardCard) validateTemplateID(formats strfmt.Registry) error {

	if err := m.TemplateID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("templateId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardCard) UnmarshalBinary(b []byte) error {
	var res DashboardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
