// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceHealthEvent An event that represents a change in the health of the a device.
// swagger:model DeviceHealthEvent
type DeviceHealthEvent struct {

	// The id of the device.
	DeviceID string `json:"deviceId,omitempty"`

	// The id of the event.
	EventID string `json:"eventId,omitempty"`

	// The id of the hub.
	HubID string `json:"hubId,omitempty"`

	// The id of the location in which the event was triggered.
	LocationID string `json:"locationId,omitempty"`

	// The reason the device is offline.
	//
	// Enum: [NONE SERVICE_UNAVAILABLE HUB_OFFLINE ZWAVE_OFFLINE ZIGBEE_OFFLINE BLUETOOTH_OFFLINE HUB_DISCONNECTED]
	Reason string `json:"reason,omitempty"`

	// The status of the device.
	//
	// Enum: [OFFLINE ONLINE UNHEALTHY]
	Status string `json:"status,omitempty"`
}

// Validate validates this device health event
func (m *DeviceHealthEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceHealthEventTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","SERVICE_UNAVAILABLE","HUB_OFFLINE","ZWAVE_OFFLINE","ZIGBEE_OFFLINE","BLUETOOTH_OFFLINE","HUB_DISCONNECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceHealthEventTypeReasonPropEnum = append(deviceHealthEventTypeReasonPropEnum, v)
	}
}

const (

	// DeviceHealthEventReasonNONE captures enum value "NONE"
	DeviceHealthEventReasonNONE string = "NONE"

	// DeviceHealthEventReasonSERVICEUNAVAILABLE captures enum value "SERVICE_UNAVAILABLE"
	DeviceHealthEventReasonSERVICEUNAVAILABLE string = "SERVICE_UNAVAILABLE"

	// DeviceHealthEventReasonHUBOFFLINE captures enum value "HUB_OFFLINE"
	DeviceHealthEventReasonHUBOFFLINE string = "HUB_OFFLINE"

	// DeviceHealthEventReasonZWAVEOFFLINE captures enum value "ZWAVE_OFFLINE"
	DeviceHealthEventReasonZWAVEOFFLINE string = "ZWAVE_OFFLINE"

	// DeviceHealthEventReasonZIGBEEOFFLINE captures enum value "ZIGBEE_OFFLINE"
	DeviceHealthEventReasonZIGBEEOFFLINE string = "ZIGBEE_OFFLINE"

	// DeviceHealthEventReasonBLUETOOTHOFFLINE captures enum value "BLUETOOTH_OFFLINE"
	DeviceHealthEventReasonBLUETOOTHOFFLINE string = "BLUETOOTH_OFFLINE"

	// DeviceHealthEventReasonHUBDISCONNECTED captures enum value "HUB_DISCONNECTED"
	DeviceHealthEventReasonHUBDISCONNECTED string = "HUB_DISCONNECTED"
)

// prop value enum
func (m *DeviceHealthEvent) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceHealthEventTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceHealthEvent) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

var deviceHealthEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFFLINE","ONLINE","UNHEALTHY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceHealthEventTypeStatusPropEnum = append(deviceHealthEventTypeStatusPropEnum, v)
	}
}

const (

	// DeviceHealthEventStatusOFFLINE captures enum value "OFFLINE"
	DeviceHealthEventStatusOFFLINE string = "OFFLINE"

	// DeviceHealthEventStatusONLINE captures enum value "ONLINE"
	DeviceHealthEventStatusONLINE string = "ONLINE"

	// DeviceHealthEventStatusUNHEALTHY captures enum value "UNHEALTHY"
	DeviceHealthEventStatusUNHEALTHY string = "UNHEALTHY"
)

// prop value enum
func (m *DeviceHealthEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceHealthEventTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceHealthEvent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceHealthEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceHealthEvent) UnmarshalBinary(b []byte) error {
	var res DeviceHealthEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
