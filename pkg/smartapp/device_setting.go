// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceSetting Device Setting
// swagger:model DeviceSetting
type DeviceSetting struct {
	SectionSetting

	// The required capabilities for the device(s) options.
	Capabilities []string `json:"capabilities"`

	// Indicates if this device setting can have multiple values.
	Multiple *bool `json:"multiple,omitempty"`

	// The required permissions for the selected device(s).
	Permissions []string `json:"permissions"`

	// Indicates if the first device in the list of options should be pre selected.
	Preselect *bool `json:"preselect,omitempty"`

	// style
	Style StyleType `json:"style,omitempty"`

	// Indicates if this input should refresh configs after a change in value.
	SubmitOnChange *bool `json:"submitOnChange,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DeviceSetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SectionSetting
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SectionSetting = aO0

	// AO1
	var dataAO1 struct {
		Capabilities []string `json:"capabilities,omitempty"`

		Multiple *bool `json:"multiple,omitempty"`

		Permissions []string `json:"permissions,omitempty"`

		Preselect *bool `json:"preselect,omitempty"`

		Style StyleType `json:"style,omitempty"`

		SubmitOnChange *bool `json:"submitOnChange,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Capabilities = dataAO1.Capabilities

	m.Multiple = dataAO1.Multiple

	m.Permissions = dataAO1.Permissions

	m.Preselect = dataAO1.Preselect

	m.Style = dataAO1.Style

	m.SubmitOnChange = dataAO1.SubmitOnChange

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DeviceSetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SectionSetting)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Capabilities []string `json:"capabilities,omitempty"`

		Multiple *bool `json:"multiple,omitempty"`

		Permissions []string `json:"permissions,omitempty"`

		Preselect *bool `json:"preselect,omitempty"`

		Style StyleType `json:"style,omitempty"`

		SubmitOnChange *bool `json:"submitOnChange,omitempty"`
	}

	dataAO1.Capabilities = m.Capabilities

	dataAO1.Multiple = m.Multiple

	dataAO1.Permissions = m.Permissions

	dataAO1.Preselect = m.Preselect

	dataAO1.Style = m.Style

	dataAO1.SubmitOnChange = m.SubmitOnChange

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this device setting
func (m *DeviceSetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SectionSetting
	if err := m.SectionSetting.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStyle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSetting) validateCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Capabilities); i++ {

		if err := validate.MaxLength("capabilities"+"."+strconv.Itoa(i), "body", string(m.Capabilities[i]), 128); err != nil {
			return err
		}

	}

	return nil
}

var deviceSettingPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["r","x","w"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceSettingPermissionsItemsEnum = append(deviceSettingPermissionsItemsEnum, v)
	}
}

func (m *DeviceSetting) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceSettingPermissionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceSetting) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DeviceSetting) validateStyle(formats strfmt.Registry) error {

	if swag.IsZero(m.Style) { // not required
		return nil
	}

	if err := m.Style.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("style")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSetting) UnmarshalBinary(b []byte) error {
	var res DeviceSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
