// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// EnumSetting Enum Setting
// swagger:model EnumSetting
type EnumSetting struct {
	SectionSetting

	// Display the enum options as groups.
	GroupedOptions []*GroupedOption `json:"groupedOptions"`

	// Indicates if this enum setting can have multiple values.
	Multiple *bool `json:"multiple,omitempty"`

	// The enum options.
	Options []*Option `json:"options"`

	// style
	Style StyleType `json:"style,omitempty"`

	// Indicates if this input should refresh configs after a change in value.
	SubmitOnChange *bool `json:"submitOnChange,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EnumSetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SectionSetting
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SectionSetting = aO0

	// AO1
	var dataAO1 struct {
		GroupedOptions []*GroupedOption `json:"groupedOptions,omitempty"`

		Multiple *bool `json:"multiple,omitempty"`

		Options []*Option `json:"options,omitempty"`

		Style StyleType `json:"style,omitempty"`

		SubmitOnChange *bool `json:"submitOnChange,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.GroupedOptions = dataAO1.GroupedOptions

	m.Multiple = dataAO1.Multiple

	m.Options = dataAO1.Options

	m.Style = dataAO1.Style

	m.SubmitOnChange = dataAO1.SubmitOnChange

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EnumSetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SectionSetting)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		GroupedOptions []*GroupedOption `json:"groupedOptions,omitempty"`

		Multiple *bool `json:"multiple,omitempty"`

		Options []*Option `json:"options,omitempty"`

		Style StyleType `json:"style,omitempty"`

		SubmitOnChange *bool `json:"submitOnChange,omitempty"`
	}

	dataAO1.GroupedOptions = m.GroupedOptions

	dataAO1.Multiple = m.Multiple

	dataAO1.Options = m.Options

	dataAO1.Style = m.Style

	dataAO1.SubmitOnChange = m.SubmitOnChange

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this enum setting
func (m *EnumSetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SectionSetting
	if err := m.SectionSetting.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupedOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStyle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnumSetting) validateGroupedOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupedOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupedOptions); i++ {
		if swag.IsZero(m.GroupedOptions[i]) { // not required
			continue
		}

		if m.GroupedOptions[i] != nil {
			if err := m.GroupedOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupedOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumSetting) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumSetting) validateStyle(formats strfmt.Registry) error {

	if swag.IsZero(m.Style) { // not required
		return nil
	}

	if err := m.Style.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("style")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnumSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumSetting) UnmarshalBinary(b []byte) error {
	var res EnumSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
