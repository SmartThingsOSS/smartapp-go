// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Event The event information, only populated if the execution type is EVENT.
// swagger:model Event
type Event struct {

	// device commands event
	DeviceCommandsEvent *DeviceCommandsEvent `json:"deviceCommandsEvent,omitempty"`

	// device event
	DeviceEvent *DeviceEvent `json:"deviceEvent,omitempty"`

	// event type
	EventType EventType `json:"eventType,omitempty"`

	// mode event
	ModeEvent *ModeEvent `json:"modeEvent,omitempty"`

	// timer event
	TimerEvent *TimerEvent `json:"timerEvent,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceCommandsEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimerEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateDeviceCommandsEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceCommandsEvent) { // not required
		return nil
	}

	if m.DeviceCommandsEvent != nil {
		if err := m.DeviceCommandsEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceCommandsEvent")
			}
			return err
		}
	}

	return nil
}

func (m *Event) validateDeviceEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceEvent) { // not required
		return nil
	}

	if m.DeviceEvent != nil {
		if err := m.DeviceEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceEvent")
			}
			return err
		}
	}

	return nil
}

func (m *Event) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventType")
		}
		return err
	}

	return nil
}

func (m *Event) validateModeEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.ModeEvent) { // not required
		return nil
	}

	if m.ModeEvent != nil {
		if err := m.ModeEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modeEvent")
			}
			return err
		}
	}

	return nil
}

func (m *Event) validateTimerEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.TimerEvent) { // not required
		return nil
	}

	if m.TimerEvent != nil {
		if err := m.TimerEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timerEvent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
