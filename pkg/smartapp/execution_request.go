// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionRequest The root model for all executions.  An execution request is compositional in nature.  Client's can
// expect exactly one *Data field set depending on the type of execution.  For example, if execution is
// of type EVENT, the "eventData" field will be set.
//
// swagger:model ExecutionRequest
type ExecutionRequest struct {

	// configuration data
	ConfigurationData *ConfigurationData `json:"configurationData,omitempty"`

	// event data
	EventData *EventData `json:"eventData,omitempty"`

	// This is a correlation id that is assigned to the execution that is useful for support requests.
	// Format: uuid
	ExecutionID strfmt.UUID `json:"executionId,omitempty"`

	// install data
	InstallData *InstallData `json:"installData,omitempty"`

	// lifecycle
	Lifecycle AppLifecycle `json:"lifecycle,omitempty"`

	// An IETF BCP 47 language tag representing the chosen locale for this account.
	Locale string `json:"locale,omitempty"`

	// oauth callback data
	OauthCallbackData *OAuthCallbackData `json:"oauthCallbackData,omitempty"`

	// ping data
	PingData *PingData `json:"pingData,omitempty"`

	// Global settings as defined on the App.
	Settings map[string]string `json:"settings,omitempty"`

	// uninstall data
	UninstallData *UninstallData `json:"uninstallData,omitempty"`

	// update data
	UpdateData *UpdateData `json:"updateData,omitempty"`

	// The version of the execution's request model.
	Version string `json:"version,omitempty"`
}

// Validate validates this execution request
func (m *ExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthCallbackData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUninstallData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionRequest) validateConfigurationData(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationData) { // not required
		return nil
	}

	if m.ConfigurationData != nil {
		if err := m.ConfigurationData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionRequest) validateEventData(formats strfmt.Registry) error {

	if swag.IsZero(m.EventData) { // not required
		return nil
	}

	if m.EventData != nil {
		if err := m.EventData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionRequest) validateExecutionID(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionID) { // not required
		return nil
	}

	if err := validate.FormatOf("executionId", "body", "uuid", m.ExecutionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionRequest) validateInstallData(formats strfmt.Registry) error {

	if swag.IsZero(m.InstallData) { // not required
		return nil
	}

	if m.InstallData != nil {
		if err := m.InstallData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionRequest) validateLifecycle(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifecycle) { // not required
		return nil
	}

	if err := m.Lifecycle.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lifecycle")
		}
		return err
	}

	return nil
}

func (m *ExecutionRequest) validateOauthCallbackData(formats strfmt.Registry) error {

	if swag.IsZero(m.OauthCallbackData) { // not required
		return nil
	}

	if m.OauthCallbackData != nil {
		if err := m.OauthCallbackData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oauthCallbackData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionRequest) validatePingData(formats strfmt.Registry) error {

	if swag.IsZero(m.PingData) { // not required
		return nil
	}

	if m.PingData != nil {
		if err := m.PingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pingData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionRequest) validateUninstallData(formats strfmt.Registry) error {

	if swag.IsZero(m.UninstallData) { // not required
		return nil
	}

	if m.UninstallData != nil {
		if err := m.UninstallData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uninstallData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionRequest) validateUpdateData(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateData) { // not required
		return nil
	}

	if m.UpdateData != nil {
		if err := m.UpdateData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionRequest) UnmarshalBinary(b []byte) error {
	var res ExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
