// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExecutionResponse Expected response structure for an SmartApp execution.  An execution response is compositional in nature.  Client's should
// set exactly one *Data field depending on the type of execution.  For example, if the execution request's lifecycle was of type EVENT,
// the "eventData" field should be returned.
//
// swagger:model ExecutionResponse
type ExecutionResponse struct {

	// configuration data
	ConfigurationData *ConfigurationResponseData `json:"configurationData,omitempty"`

	// event data
	EventData EventResponseData `json:"eventData,omitempty"`

	// install data
	InstallData InstallResponseData `json:"installData,omitempty"`

	// oauth callback data
	OauthCallbackData OAuthCallbackResponseData `json:"oauthCallbackData,omitempty"`

	// ping data
	PingData *PingResponseData `json:"pingData,omitempty"`

	// status code
	StatusCode int64 `json:"statusCode,omitempty"`

	// uninstall data
	UninstallData UninstallResponseData `json:"uninstallData,omitempty"`

	// update data
	UpdateData UpdateResponseData `json:"updateData,omitempty"`
}

// Validate validates this execution response
func (m *ExecutionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePingData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionResponse) validateConfigurationData(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationData) { // not required
		return nil
	}

	if m.ConfigurationData != nil {
		if err := m.ConfigurationData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationData")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionResponse) validatePingData(formats strfmt.Registry) error {

	if swag.IsZero(m.PingData) { // not required
		return nil
	}

	if m.PingData != nil {
		if err := m.PingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pingData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionResponse) UnmarshalBinary(b []byte) error {
	var res ExecutionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
