// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImagesSetting Images Setting
// swagger:model ImagesSetting
type ImagesSetting struct {
	SectionSetting

	// The images to display.
	Images []string `json:"images"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ImagesSetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SectionSetting
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SectionSetting = aO0

	// AO1
	var dataAO1 struct {
		Images []string `json:"images,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Images = dataAO1.Images

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ImagesSetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SectionSetting)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Images []string `json:"images,omitempty"`
	}

	dataAO1.Images = m.Images

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this images setting
func (m *ImagesSetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SectionSetting
	if err := m.SectionSetting.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImagesSetting) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {

		if err := validate.MaxLength("images"+"."+strconv.Itoa(i), "body", string(m.Images[i]), 2048); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImagesSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImagesSetting) UnmarshalBinary(b []byte) error {
	var res ImagesSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
