// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstallData The data payload to an execution request with an AppLifecycle of INSTALL.
// swagger:model InstallData
type InstallData struct {

	// An OAuth token to use when calling into SmartThings API's.
	// Required: true
	AuthToken *string `json:"authToken"`

	// installed app
	// Required: true
	InstalledApp *InstalledApp `json:"installedApp"`

	// A refresh token which maybe used to obtain authorization to SmartThings API after expiration of the authToken.
	// An integration will need to use this refreshToken to support calling the SmartThings API outside the context
	// of an event.
	//
	// Required: true
	RefreshToken *string `json:"refreshToken"`
}

// Validate validates this install data
func (m *InstallData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallData) validateAuthToken(formats strfmt.Registry) error {

	if err := validate.Required("authToken", "body", m.AuthToken); err != nil {
		return err
	}

	return nil
}

func (m *InstallData) validateInstalledApp(formats strfmt.Registry) error {

	if err := validate.Required("installedApp", "body", m.InstalledApp); err != nil {
		return err
	}

	if m.InstalledApp != nil {
		if err := m.InstalledApp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installedApp")
			}
			return err
		}
	}

	return nil
}

func (m *InstallData) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("refreshToken", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallData) UnmarshalBinary(b []byte) error {
	var res InstallData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
