// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstalledApp The information associated with this installed app.
// swagger:model InstalledApp
type InstalledApp struct {

	// config
	Config ConfigMap `json:"config,omitempty"`

	// The id of the installed app.
	// Format: uuid
	InstalledAppID strfmt.UUID `json:"installedAppId,omitempty"`

	// The location that the installed App is associated with
	LocationID string `json:"locationId,omitempty"`

	// permissions
	Permissions Permissions `json:"permissions"`
}

// Validate validates this installed app
func (m *InstalledApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstalledApp) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if err := m.Config.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("config")
		}
		return err
	}

	return nil
}

func (m *InstalledApp) validateInstalledAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledAppID) { // not required
		return nil
	}

	if err := validate.FormatOf("installedAppId", "body", "uuid", m.InstalledAppID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstalledApp) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if err := m.Permissions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("permissions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstalledApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstalledApp) UnmarshalBinary(b []byte) error {
	var res InstalledApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
