// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinkSetting URL link Setting
// swagger:model LinkSetting
type LinkSetting struct {
	SectionSetting

	// The image url.
	// Max Length: 2048
	Image string `json:"image,omitempty"`

	// style
	Style StyleType `json:"style,omitempty"`

	// The page to navigate to.
	// Max Length: 2048
	URL string `json:"url,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LinkSetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SectionSetting
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SectionSetting = aO0

	// AO1
	var dataAO1 struct {
		Image string `json:"image,omitempty"`

		Style StyleType `json:"style,omitempty"`

		URL string `json:"url,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Image = dataAO1.Image

	m.Style = dataAO1.Style

	m.URL = dataAO1.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LinkSetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SectionSetting)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Image string `json:"image,omitempty"`

		Style StyleType `json:"style,omitempty"`

		URL string `json:"url,omitempty"`
	}

	dataAO1.Image = m.Image

	dataAO1.Style = m.Style

	dataAO1.URL = m.URL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this link setting
func (m *LinkSetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SectionSetting
	if err := m.SectionSetting.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkSetting) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if err := validate.MaxLength("image", "body", string(m.Image), 2048); err != nil {
		return err
	}

	return nil
}

func (m *LinkSetting) validateStyle(formats strfmt.Registry) error {

	if swag.IsZero(m.Style) { // not required
		return nil
	}

	if err := m.Style.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("style")
		}
		return err
	}

	return nil
}

func (m *LinkSetting) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MaxLength("url", "body", string(m.URL), 2048); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinkSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkSetting) UnmarshalBinary(b []byte) error {
	var res LinkSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
