// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuthSetting OAuth Setting
// swagger:model OAuthSetting
type OAuthSetting struct {
	SectionSetting

	// style
	Style StyleType `json:"style,omitempty"`

	// The url to use for the OAuth service.
	// Use __SmartThingsOAuthCallback__ in the template for the callback/redirect url you need to provide to the OAuth service.
	//
	// Max Length: 2048
	URLTemplate string `json:"urlTemplate,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OAuthSetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SectionSetting
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SectionSetting = aO0

	// AO1
	var dataAO1 struct {
		Style StyleType `json:"style,omitempty"`

		URLTemplate string `json:"urlTemplate,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Style = dataAO1.Style

	m.URLTemplate = dataAO1.URLTemplate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OAuthSetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SectionSetting)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Style StyleType `json:"style,omitempty"`

		URLTemplate string `json:"urlTemplate,omitempty"`
	}

	dataAO1.Style = m.Style

	dataAO1.URLTemplate = m.URLTemplate

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this o auth setting
func (m *OAuthSetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SectionSetting
	if err := m.SectionSetting.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthSetting) validateStyle(formats strfmt.Registry) error {

	if swag.IsZero(m.Style) { // not required
		return nil
	}

	if err := m.Style.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("style")
		}
		return err
	}

	return nil
}

func (m *OAuthSetting) validateURLTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.URLTemplate) { // not required
		return nil
	}

	if err := validate.MaxLength("urlTemplate", "body", string(m.URLTemplate), 2048); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuthSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuthSetting) UnmarshalBinary(b []byte) error {
	var res OAuthSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
