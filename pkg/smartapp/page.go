// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Page page
// swagger:model Page
type Page struct {

	// Indicates if this is the last page in the configuration process.
	Complete *bool `json:"complete,omitempty"`

	// Name of the page to be configured.
	// Max Length: 128
	Name string `json:"name,omitempty"`

	// A developer defined page ID for the next page in the configuration process. Must be URL safe characters.
	NextPageID string `json:"nextPageId,omitempty"`

	// A developer defined page ID. Must be URL safe characters.
	PageID string `json:"pageId,omitempty"`

	// A developer defined page ID for the previous page in the configuration process. Must be URL safe characters.
	PreviousPageID string `json:"previousPageId,omitempty"`

	// The display sections for user defined settings.
	Sections []*Section `json:"sections"`
}

// Validate validates this page
func (m *Page) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Page) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 128); err != nil {
		return err
	}

	return nil
}

func (m *Page) validateSections(formats strfmt.Registry) error {

	if swag.IsZero(m.Sections) { // not required
		return nil
	}

	for i := 0; i < len(m.Sections); i++ {
		if swag.IsZero(m.Sections[i]) { // not required
			continue
		}

		if m.Sections[i] != nil {
			if err := m.Sections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Page) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Page) UnmarshalBinary(b []byte) error {
	var res Page
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
