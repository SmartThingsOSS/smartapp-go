// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Section section
// swagger:model Section
type Section struct {

	// If section can be collapsed, whether or not it defaults to hidden
	Hidden *bool `json:"hidden,omitempty"`

	// Whether or not the section can be collapsed
	Hideable *bool `json:"hideable,omitempty"`

	// Name of the section.
	// Max Length: 128
	Name string `json:"name,omitempty"`

	// Configuration settings represent the questions asked to the end user installing an integration the answers to
	// which provide the configuration for which the integration will use when executing. Settings follow an inheritance
	// pattern.  The type field dictates the expected instance of setting that is provided.
	//
	Settings []*SectionSetting `json:"settings"`
}

// Validate validates this section
func (m *Section) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Section) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 128); err != nil {
		return err
	}

	return nil
}

func (m *Section) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	for i := 0; i < len(m.Settings); i++ {
		if swag.IsZero(m.Settings[i]) { // not required
			continue
		}

		if m.Settings[i] != nil {
			if err := m.Settings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("settings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Section) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Section) UnmarshalBinary(b []byte) error {
	var res Section
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
