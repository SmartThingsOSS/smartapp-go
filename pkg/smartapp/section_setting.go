// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SectionSetting section setting
// swagger:model SectionSetting
type SectionSetting struct {
	Setting

	// A defualt value for the setting.
	// Max Length: 128
	DefaultValue string `json:"defaultValue,omitempty"`

	// Indicates if this setting is required for configuration.
	Required *bool `json:"required,omitempty"`

	// type
	// Required: true
	Type SettingType `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SectionSetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Setting
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Setting = aO0

	// AO1
	var dataAO1 struct {
		DefaultValue string `json:"defaultValue,omitempty"`

		Required *bool `json:"required,omitempty"`

		Type SettingType `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DefaultValue = dataAO1.DefaultValue

	m.Required = dataAO1.Required

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SectionSetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Setting)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		DefaultValue string `json:"defaultValue,omitempty"`

		Required *bool `json:"required,omitempty"`

		Type SettingType `json:"type"`
	}

	dataAO1.DefaultValue = m.DefaultValue

	dataAO1.Required = m.Required

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this section setting
func (m *SectionSetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Setting
	if err := m.Setting.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SectionSetting) validateDefaultValue(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultValue) { // not required
		return nil
	}

	if err := validate.MaxLength("defaultValue", "body", string(m.DefaultValue), 128); err != nil {
		return err
	}

	return nil
}

func (m *SectionSetting) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SectionSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SectionSetting) UnmarshalBinary(b []byte) error {
	var res SectionSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
