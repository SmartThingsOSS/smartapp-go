// Code generated by go-swagger; DO NOT EDIT.

package smartapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityArmStateEvent An event that represents a change in the arm state of a security system.
//
// swagger:model SecurityArmStateEvent
type SecurityArmStateEvent struct {

	// The arm state of a security system.
	//
	// Enum: [UNKNOWN ARMED_STAY ARMED_AWAY DISARMED]
	ArmState string `json:"armState,omitempty"`

	// The id of the event.
	EventID string `json:"eventId,omitempty"`

	// The id of the location in which the event was triggered.
	LocationID string `json:"locationId,omitempty"`

	// A set of key / value pairs useful for passing any optional arguments.
	//
	OptionalArguments map[string]SimpleValue `json:"optionalArguments,omitempty"`
}

// Validate validates this security arm state event
func (m *SecurityArmStateEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArmState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var securityArmStateEventTypeArmStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","ARMED_STAY","ARMED_AWAY","DISARMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityArmStateEventTypeArmStatePropEnum = append(securityArmStateEventTypeArmStatePropEnum, v)
	}
}

const (

	// SecurityArmStateEventArmStateUNKNOWN captures enum value "UNKNOWN"
	SecurityArmStateEventArmStateUNKNOWN string = "UNKNOWN"

	// SecurityArmStateEventArmStateARMEDSTAY captures enum value "ARMED_STAY"
	SecurityArmStateEventArmStateARMEDSTAY string = "ARMED_STAY"

	// SecurityArmStateEventArmStateARMEDAWAY captures enum value "ARMED_AWAY"
	SecurityArmStateEventArmStateARMEDAWAY string = "ARMED_AWAY"

	// SecurityArmStateEventArmStateDISARMED captures enum value "DISARMED"
	SecurityArmStateEventArmStateDISARMED string = "DISARMED"
)

// prop value enum
func (m *SecurityArmStateEvent) validateArmStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityArmStateEventTypeArmStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityArmStateEvent) validateArmState(formats strfmt.Registry) error {

	if swag.IsZero(m.ArmState) { // not required
		return nil
	}

	// value enum
	if err := m.validateArmStateEnum("armState", "body", m.ArmState); err != nil {
		return err
	}

	return nil
}

func (m *SecurityArmStateEvent) validateOptionalArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionalArguments) { // not required
		return nil
	}

	for k := range m.OptionalArguments {

		if err := validate.Required("optionalArguments"+"."+k, "body", m.OptionalArguments[k]); err != nil {
			return err
		}
		if val, ok := m.OptionalArguments[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityArmStateEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityArmStateEvent) UnmarshalBinary(b []byte) error {
	var res SecurityArmStateEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
