// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new apps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateApp creates an app

Create an app integration.

A single developer account is allowed to contain a maximum of 500 apps.  Upon hitting that limit a 422 error
response is returned with an error code of LimitError.

*/
func (a *Client) CreateApp(params *CreateAppParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApp",
		Method:             "POST",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAppOK), nil

}

/*
DeleteApp deletes an app

Delete an app.
*/
func (a *Client) DeleteApp(params *DeleteAppParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApp",
		Method:             "DELETE",
		PathPattern:        "/apps/{appNameOrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppOK), nil

}

/*
GenerateAppOauth generates an app s oauth client secret

When an app is first created an OAuth client/secret are automatically generated for the integration.  However,
there are times when it maybe useful to re-generate a client/secret.  Such as in cases where a secret becomes
compromised.

*/
func (a *Client) GenerateAppOauth(params *GenerateAppOauthParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateAppOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateAppOauthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateAppOauth",
		Method:             "POST",
		PathPattern:        "/apps/{appNameOrId}/oauth/generate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateAppOauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenerateAppOauthOK), nil

}

/*
GetApp gets an app

Get a single app.
*/
func (a *Client) GetApp(params *GetAppParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApp",
		Method:             "GET",
		PathPattern:        "/apps/{appNameOrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppOK), nil

}

/*
GetAppOauth gets an app s oauth settings

Get an app's oauth settings.
*/
func (a *Client) GetAppOauth(params *GetAppOauthParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppOauthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppOauth",
		Method:             "GET",
		PathPattern:        "/apps/{appNameOrId}/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppOauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppOauthOK), nil

}

/*
GetAppSettings gets settings

Get settings for an app.
*/
func (a *Client) GetAppSettings(params *GetAppSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppSettings",
		Method:             "GET",
		PathPattern:        "/apps/{appNameOrId}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppSettingsOK), nil

}

/*
ListApps lists apps

List all apps configured in an account.
*/
func (a *Client) ListApps(params *ListAppsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listApps",
		Method:             "GET",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAppsOK), nil

}

/*
UpdateApp updates an app

Update an app.
*/
func (a *Client) UpdateApp(params *UpdateAppParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApp",
		Method:             "PUT",
		PathPattern:        "/apps/{appNameOrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAppOK), nil

}

/*
UpdateAppOauth updates an app s oauth settings

Update an app's oauth settings.
*/
func (a *Client) UpdateAppOauth(params *UpdateAppOauthParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAppOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppOauthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAppOauth",
		Method:             "PUT",
		PathPattern:        "/apps/{appNameOrId}/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppOauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAppOauthOK), nil

}

/*
UpdateAppSettings updates settings

Update settings for an app.
*/
func (a *Client) UpdateAppSettings(params *UpdateAppSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAppSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAppSettings",
		Method:             "PUT",
		PathPattern:        "/apps/{appNameOrId}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAppSettingsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
