// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// NewCreateAppParams creates a new CreateAppParams object
// with the default values initialized.
func NewCreateAppParams() *CreateAppParams {
	var ()
	return &CreateAppParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateAppParamsWithTimeout creates a new CreateAppParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateAppParamsWithTimeout(timeout time.Duration) *CreateAppParams {
	var ()
	return &CreateAppParams{

		timeout: timeout,
	}
}

// NewCreateAppParamsWithContext creates a new CreateAppParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateAppParamsWithContext(ctx context.Context) *CreateAppParams {
	var ()
	return &CreateAppParams{

		Context: ctx,
	}
}

// NewCreateAppParamsWithHTTPClient creates a new CreateAppParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateAppParamsWithHTTPClient(client *http.Client) *CreateAppParams {
	var ()
	return &CreateAppParams{
		HTTPClient: client,
	}
}

/*CreateAppParams contains all the parameters to send to the API endpoint
for the create app operation typically these are written to a http.Request
*/
type CreateAppParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*CreateOrUpdateAppRequest*/
	CreateOrUpdateAppRequest *models.CreateOrUpdateAppRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create app params
func (o *CreateAppParams) WithTimeout(timeout time.Duration) *CreateAppParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create app params
func (o *CreateAppParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create app params
func (o *CreateAppParams) WithContext(ctx context.Context) *CreateAppParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create app params
func (o *CreateAppParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create app params
func (o *CreateAppParams) WithHTTPClient(client *http.Client) *CreateAppParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create app params
func (o *CreateAppParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the create app params
func (o *CreateAppParams) WithAuthorization(authorization string) *CreateAppParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the create app params
func (o *CreateAppParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCreateOrUpdateAppRequest adds the createOrUpdateAppRequest to the create app params
func (o *CreateAppParams) WithCreateOrUpdateAppRequest(createOrUpdateAppRequest *models.CreateOrUpdateAppRequest) *CreateAppParams {
	o.SetCreateOrUpdateAppRequest(createOrUpdateAppRequest)
	return o
}

// SetCreateOrUpdateAppRequest adds the createOrUpdateAppRequest to the create app params
func (o *CreateAppParams) SetCreateOrUpdateAppRequest(createOrUpdateAppRequest *models.CreateOrUpdateAppRequest) {
	o.CreateOrUpdateAppRequest = createOrUpdateAppRequest
}

// WriteToRequest writes these params to a swagger request
func (o *CreateAppParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.CreateOrUpdateAppRequest != nil {
		if err := r.SetBodyParam(o.CreateOrUpdateAppRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
