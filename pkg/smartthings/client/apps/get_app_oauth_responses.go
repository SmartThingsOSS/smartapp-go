// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetAppOauthReader is a Reader for the GetAppOauth structure.
type GetAppOauthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppOauthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAppOauthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAppOauthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAppOauthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetAppOauthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetAppOauthTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetAppOauthDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAppOauthOK creates a GetAppOauthOK with default headers values
func NewGetAppOauthOK() *GetAppOauthOK {
	return &GetAppOauthOK{}
}

/*GetAppOauthOK handles this case with default header values.

An app.
*/
type GetAppOauthOK struct {
	Payload *models.AppOAuth
}

func (o *GetAppOauthOK) Error() string {
	return fmt.Sprintf("[GET /apps/{appNameOrId}/oauth][%d] getAppOauthOK  %+v", 200, o.Payload)
}

func (o *GetAppOauthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppOAuth)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppOauthBadRequest creates a GetAppOauthBadRequest with default headers values
func NewGetAppOauthBadRequest() *GetAppOauthBadRequest {
	return &GetAppOauthBadRequest{}
}

/*GetAppOauthBadRequest handles this case with default header values.

Bad request
*/
type GetAppOauthBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetAppOauthBadRequest) Error() string {
	return fmt.Sprintf("[GET /apps/{appNameOrId}/oauth][%d] getAppOauthBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppOauthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppOauthUnauthorized creates a GetAppOauthUnauthorized with default headers values
func NewGetAppOauthUnauthorized() *GetAppOauthUnauthorized {
	return &GetAppOauthUnauthorized{}
}

/*GetAppOauthUnauthorized handles this case with default header values.

Not authenticated
*/
type GetAppOauthUnauthorized struct {
}

func (o *GetAppOauthUnauthorized) Error() string {
	return fmt.Sprintf("[GET /apps/{appNameOrId}/oauth][%d] getAppOauthUnauthorized ", 401)
}

func (o *GetAppOauthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAppOauthForbidden creates a GetAppOauthForbidden with default headers values
func NewGetAppOauthForbidden() *GetAppOauthForbidden {
	return &GetAppOauthForbidden{}
}

/*GetAppOauthForbidden handles this case with default header values.

Not authorized
*/
type GetAppOauthForbidden struct {
}

func (o *GetAppOauthForbidden) Error() string {
	return fmt.Sprintf("[GET /apps/{appNameOrId}/oauth][%d] getAppOauthForbidden ", 403)
}

func (o *GetAppOauthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAppOauthTooManyRequests creates a GetAppOauthTooManyRequests with default headers values
func NewGetAppOauthTooManyRequests() *GetAppOauthTooManyRequests {
	return &GetAppOauthTooManyRequests{}
}

/*GetAppOauthTooManyRequests handles this case with default header values.

Too many requests
*/
type GetAppOauthTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetAppOauthTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /apps/{appNameOrId}/oauth][%d] getAppOauthTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAppOauthTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppOauthDefault creates a GetAppOauthDefault with default headers values
func NewGetAppOauthDefault(code int) *GetAppOauthDefault {
	return &GetAppOauthDefault{
		_statusCode: code,
	}
}

/*GetAppOauthDefault handles this case with default header values.

Unexpected error
*/
type GetAppOauthDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get app oauth default response
func (o *GetAppOauthDefault) Code() int {
	return o._statusCode
}

func (o *GetAppOauthDefault) Error() string {
	return fmt.Sprintf("[GET /apps/{appNameOrId}/oauth][%d] getAppOauth default  %+v", o._statusCode, o.Payload)
}

func (o *GetAppOauthDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
