// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new capabilities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for capabilities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCapability gets a capability by ID and version

Get a capability by ID.
*/
func (a *Client) GetCapability(params *GetCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCapability",
		Method:             "GET",
		PathPattern:        "/capabilities/{capabilityId}/{capabilityVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCapabilityOK), nil

}

/*
ListCapabilities alls capabilities

All capabilities.
*/
func (a *Client) ListCapabilities(params *ListCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCapabilities",
		Method:             "GET",
		PathPattern:        "/capabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCapabilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCapabilitiesOK), nil

}

/*
ListCapabilityVersions lists a capabilities versions

List a capabilities versions.
*/
func (a *Client) ListCapabilityVersions(params *ListCapabilityVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListCapabilityVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCapabilityVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCapabilityVersions",
		Method:             "GET",
		PathPattern:        "/capabilities/{capabilityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCapabilityVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCapabilityVersionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
