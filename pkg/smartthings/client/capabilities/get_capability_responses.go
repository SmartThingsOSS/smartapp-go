// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetCapabilityReader is a Reader for the GetCapability structure.
type GetCapabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCapabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCapabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetCapabilityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCapabilityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCapabilityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetCapabilityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCapabilityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCapabilityOK creates a GetCapabilityOK with default headers values
func NewGetCapabilityOK() *GetCapabilityOK {
	return &GetCapabilityOK{}
}

/*GetCapabilityOK handles this case with default header values.

successful return of a capability
*/
type GetCapabilityOK struct {
	/*Maximum requests allowed within the rate limit window.
	 */
	XRateLimitLimit int64
	/*Remaining requests available within the window.
	 */
	XRateLimitRemaining int64
	/*Time in milliseconds until the current window expires.
	 */
	XRateLimitReset int64

	Payload *models.Capability
}

func (o *GetCapabilityOK) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}/{capabilityVersion}][%d] getCapabilityOK  %+v", 200, o.Payload)
}

func (o *GetCapabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-Reset
	xRateLimitReset, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Reset"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Reset", "header", "int64", response.GetHeader("X-RateLimit-Reset"))
	}
	o.XRateLimitReset = xRateLimitReset

	o.Payload = new(models.Capability)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCapabilityUnauthorized creates a GetCapabilityUnauthorized with default headers values
func NewGetCapabilityUnauthorized() *GetCapabilityUnauthorized {
	return &GetCapabilityUnauthorized{}
}

/*GetCapabilityUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCapabilityUnauthorized struct {
}

func (o *GetCapabilityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}/{capabilityVersion}][%d] getCapabilityUnauthorized ", 401)
}

func (o *GetCapabilityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCapabilityForbidden creates a GetCapabilityForbidden with default headers values
func NewGetCapabilityForbidden() *GetCapabilityForbidden {
	return &GetCapabilityForbidden{}
}

/*GetCapabilityForbidden handles this case with default header values.

Forbidden
*/
type GetCapabilityForbidden struct {
}

func (o *GetCapabilityForbidden) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}/{capabilityVersion}][%d] getCapabilityForbidden ", 403)
}

func (o *GetCapabilityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCapabilityNotFound creates a GetCapabilityNotFound with default headers values
func NewGetCapabilityNotFound() *GetCapabilityNotFound {
	return &GetCapabilityNotFound{}
}

/*GetCapabilityNotFound handles this case with default header values.

Not found
*/
type GetCapabilityNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetCapabilityNotFound) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}/{capabilityVersion}][%d] getCapabilityNotFound  %+v", 404, o.Payload)
}

func (o *GetCapabilityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCapabilityTooManyRequests creates a GetCapabilityTooManyRequests with default headers values
func NewGetCapabilityTooManyRequests() *GetCapabilityTooManyRequests {
	return &GetCapabilityTooManyRequests{}
}

/*GetCapabilityTooManyRequests handles this case with default header values.

Too many requests
*/
type GetCapabilityTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetCapabilityTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}/{capabilityVersion}][%d] getCapabilityTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCapabilityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCapabilityDefault creates a GetCapabilityDefault with default headers values
func NewGetCapabilityDefault(code int) *GetCapabilityDefault {
	return &GetCapabilityDefault{
		_statusCode: code,
	}
}

/*GetCapabilityDefault handles this case with default header values.

Unexpected error
*/
type GetCapabilityDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get capability default response
func (o *GetCapabilityDefault) Code() int {
	return o._statusCode
}

func (o *GetCapabilityDefault) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}/{capabilityVersion}][%d] getCapability default  %+v", o._statusCode, o.Payload)
}

func (o *GetCapabilityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
