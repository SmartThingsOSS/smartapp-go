// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// ListCapabilityVersionsReader is a Reader for the ListCapabilityVersions structure.
type ListCapabilityVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCapabilityVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListCapabilityVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListCapabilityVersionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListCapabilityVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListCapabilityVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListCapabilityVersionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListCapabilityVersionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListCapabilityVersionsOK creates a ListCapabilityVersionsOK with default headers values
func NewListCapabilityVersionsOK() *ListCapabilityVersionsOK {
	return &ListCapabilityVersionsOK{}
}

/*ListCapabilityVersionsOK handles this case with default header values.

successful return of a capability
*/
type ListCapabilityVersionsOK struct {
	/*Maximum requests allowed within the rate limit window.
	 */
	XRateLimitLimit int64
	/*Remaining requests available within the window.
	 */
	XRateLimitRemaining int64
	/*Time in milliseconds until the current window expires.
	 */
	XRateLimitReset int64

	Payload *models.PagedCapabilities
}

func (o *ListCapabilityVersionsOK) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}][%d] listCapabilityVersionsOK  %+v", 200, o.Payload)
}

func (o *ListCapabilityVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-Reset
	xRateLimitReset, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Reset"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Reset", "header", "int64", response.GetHeader("X-RateLimit-Reset"))
	}
	o.XRateLimitReset = xRateLimitReset

	o.Payload = new(models.PagedCapabilities)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCapabilityVersionsUnauthorized creates a ListCapabilityVersionsUnauthorized with default headers values
func NewListCapabilityVersionsUnauthorized() *ListCapabilityVersionsUnauthorized {
	return &ListCapabilityVersionsUnauthorized{}
}

/*ListCapabilityVersionsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListCapabilityVersionsUnauthorized struct {
}

func (o *ListCapabilityVersionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}][%d] listCapabilityVersionsUnauthorized ", 401)
}

func (o *ListCapabilityVersionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListCapabilityVersionsForbidden creates a ListCapabilityVersionsForbidden with default headers values
func NewListCapabilityVersionsForbidden() *ListCapabilityVersionsForbidden {
	return &ListCapabilityVersionsForbidden{}
}

/*ListCapabilityVersionsForbidden handles this case with default header values.

Forbidden
*/
type ListCapabilityVersionsForbidden struct {
}

func (o *ListCapabilityVersionsForbidden) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}][%d] listCapabilityVersionsForbidden ", 403)
}

func (o *ListCapabilityVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListCapabilityVersionsNotFound creates a ListCapabilityVersionsNotFound with default headers values
func NewListCapabilityVersionsNotFound() *ListCapabilityVersionsNotFound {
	return &ListCapabilityVersionsNotFound{}
}

/*ListCapabilityVersionsNotFound handles this case with default header values.

Not found
*/
type ListCapabilityVersionsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ListCapabilityVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}][%d] listCapabilityVersionsNotFound  %+v", 404, o.Payload)
}

func (o *ListCapabilityVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCapabilityVersionsTooManyRequests creates a ListCapabilityVersionsTooManyRequests with default headers values
func NewListCapabilityVersionsTooManyRequests() *ListCapabilityVersionsTooManyRequests {
	return &ListCapabilityVersionsTooManyRequests{}
}

/*ListCapabilityVersionsTooManyRequests handles this case with default header values.

Too many requests
*/
type ListCapabilityVersionsTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *ListCapabilityVersionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}][%d] listCapabilityVersionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListCapabilityVersionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCapabilityVersionsDefault creates a ListCapabilityVersionsDefault with default headers values
func NewListCapabilityVersionsDefault(code int) *ListCapabilityVersionsDefault {
	return &ListCapabilityVersionsDefault{
		_statusCode: code,
	}
}

/*ListCapabilityVersionsDefault handles this case with default header values.

Unexpected error
*/
type ListCapabilityVersionsDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the list capability versions default response
func (o *ListCapabilityVersionsDefault) Code() int {
	return o._statusCode
}

func (o *ListCapabilityVersionsDefault) Error() string {
	return fmt.Sprintf("[GET /capabilities/{capabilityId}][%d] listCapabilityVersions default  %+v", o._statusCode, o.Payload)
}

func (o *ListCapabilityVersionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
