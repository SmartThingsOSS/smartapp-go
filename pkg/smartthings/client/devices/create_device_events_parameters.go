// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// NewCreateDeviceEventsParams creates a new CreateDeviceEventsParams object
// with the default values initialized.
func NewCreateDeviceEventsParams() *CreateDeviceEventsParams {
	var ()
	return &CreateDeviceEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateDeviceEventsParamsWithTimeout creates a new CreateDeviceEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateDeviceEventsParamsWithTimeout(timeout time.Duration) *CreateDeviceEventsParams {
	var ()
	return &CreateDeviceEventsParams{

		timeout: timeout,
	}
}

// NewCreateDeviceEventsParamsWithContext creates a new CreateDeviceEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateDeviceEventsParamsWithContext(ctx context.Context) *CreateDeviceEventsParams {
	var ()
	return &CreateDeviceEventsParams{

		Context: ctx,
	}
}

// NewCreateDeviceEventsParamsWithHTTPClient creates a new CreateDeviceEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateDeviceEventsParamsWithHTTPClient(client *http.Client) *CreateDeviceEventsParams {
	var ()
	return &CreateDeviceEventsParams{
		HTTPClient: client,
	}
}

/*CreateDeviceEventsParams contains all the parameters to send to the API endpoint
for the create device events operation typically these are written to a http.Request
*/
type CreateDeviceEventsParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*DeviceEventRequest*/
	DeviceEventRequest *models.DeviceEventsRequest
	/*DeviceID
	  the device ID

	*/
	DeviceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create device events params
func (o *CreateDeviceEventsParams) WithTimeout(timeout time.Duration) *CreateDeviceEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create device events params
func (o *CreateDeviceEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create device events params
func (o *CreateDeviceEventsParams) WithContext(ctx context.Context) *CreateDeviceEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create device events params
func (o *CreateDeviceEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create device events params
func (o *CreateDeviceEventsParams) WithHTTPClient(client *http.Client) *CreateDeviceEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create device events params
func (o *CreateDeviceEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the create device events params
func (o *CreateDeviceEventsParams) WithAuthorization(authorization string) *CreateDeviceEventsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the create device events params
func (o *CreateDeviceEventsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithDeviceEventRequest adds the deviceEventRequest to the create device events params
func (o *CreateDeviceEventsParams) WithDeviceEventRequest(deviceEventRequest *models.DeviceEventsRequest) *CreateDeviceEventsParams {
	o.SetDeviceEventRequest(deviceEventRequest)
	return o
}

// SetDeviceEventRequest adds the deviceEventRequest to the create device events params
func (o *CreateDeviceEventsParams) SetDeviceEventRequest(deviceEventRequest *models.DeviceEventsRequest) {
	o.DeviceEventRequest = deviceEventRequest
}

// WithDeviceID adds the deviceID to the create device events params
func (o *CreateDeviceEventsParams) WithDeviceID(deviceID string) *CreateDeviceEventsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the create device events params
func (o *CreateDeviceEventsParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateDeviceEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.DeviceEventRequest != nil {
		if err := r.SetBodyParam(o.DeviceEventRequest); err != nil {
			return err
		}
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
