// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// NewExecuteDeviceCommandsParams creates a new ExecuteDeviceCommandsParams object
// with the default values initialized.
func NewExecuteDeviceCommandsParams() *ExecuteDeviceCommandsParams {
	var ()
	return &ExecuteDeviceCommandsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExecuteDeviceCommandsParamsWithTimeout creates a new ExecuteDeviceCommandsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExecuteDeviceCommandsParamsWithTimeout(timeout time.Duration) *ExecuteDeviceCommandsParams {
	var ()
	return &ExecuteDeviceCommandsParams{

		timeout: timeout,
	}
}

// NewExecuteDeviceCommandsParamsWithContext creates a new ExecuteDeviceCommandsParams object
// with the default values initialized, and the ability to set a context for a request
func NewExecuteDeviceCommandsParamsWithContext(ctx context.Context) *ExecuteDeviceCommandsParams {
	var ()
	return &ExecuteDeviceCommandsParams{

		Context: ctx,
	}
}

// NewExecuteDeviceCommandsParamsWithHTTPClient creates a new ExecuteDeviceCommandsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExecuteDeviceCommandsParamsWithHTTPClient(client *http.Client) *ExecuteDeviceCommandsParams {
	var ()
	return &ExecuteDeviceCommandsParams{
		HTTPClient: client,
	}
}

/*ExecuteDeviceCommandsParams contains all the parameters to send to the API endpoint
for the execute device commands operation typically these are written to a http.Request
*/
type ExecuteDeviceCommandsParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*DeviceID
	  the device ID

	*/
	DeviceID string
	/*ExecuteCapabilityCommand*/
	ExecuteCapabilityCommand *models.DeviceCommandsRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the execute device commands params
func (o *ExecuteDeviceCommandsParams) WithTimeout(timeout time.Duration) *ExecuteDeviceCommandsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the execute device commands params
func (o *ExecuteDeviceCommandsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the execute device commands params
func (o *ExecuteDeviceCommandsParams) WithContext(ctx context.Context) *ExecuteDeviceCommandsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the execute device commands params
func (o *ExecuteDeviceCommandsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the execute device commands params
func (o *ExecuteDeviceCommandsParams) WithHTTPClient(client *http.Client) *ExecuteDeviceCommandsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the execute device commands params
func (o *ExecuteDeviceCommandsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the execute device commands params
func (o *ExecuteDeviceCommandsParams) WithAuthorization(authorization string) *ExecuteDeviceCommandsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the execute device commands params
func (o *ExecuteDeviceCommandsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithDeviceID adds the deviceID to the execute device commands params
func (o *ExecuteDeviceCommandsParams) WithDeviceID(deviceID string) *ExecuteDeviceCommandsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the execute device commands params
func (o *ExecuteDeviceCommandsParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithExecuteCapabilityCommand adds the executeCapabilityCommand to the execute device commands params
func (o *ExecuteDeviceCommandsParams) WithExecuteCapabilityCommand(executeCapabilityCommand *models.DeviceCommandsRequest) *ExecuteDeviceCommandsParams {
	o.SetExecuteCapabilityCommand(executeCapabilityCommand)
	return o
}

// SetExecuteCapabilityCommand adds the executeCapabilityCommand to the execute device commands params
func (o *ExecuteDeviceCommandsParams) SetExecuteCapabilityCommand(executeCapabilityCommand *models.DeviceCommandsRequest) {
	o.ExecuteCapabilityCommand = executeCapabilityCommand
}

// WriteToRequest writes these params to a swagger request
func (o *ExecuteDeviceCommandsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	if o.ExecuteCapabilityCommand != nil {
		if err := r.SetBodyParam(o.ExecuteCapabilityCommand); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
