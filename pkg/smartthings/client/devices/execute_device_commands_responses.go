// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// ExecuteDeviceCommandsReader is a Reader for the ExecuteDeviceCommands structure.
type ExecuteDeviceCommandsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteDeviceCommandsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExecuteDeviceCommandsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewExecuteDeviceCommandsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewExecuteDeviceCommandsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewExecuteDeviceCommandsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewExecuteDeviceCommandsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewExecuteDeviceCommandsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewExecuteDeviceCommandsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExecuteDeviceCommandsOK creates a ExecuteDeviceCommandsOK with default headers values
func NewExecuteDeviceCommandsOK() *ExecuteDeviceCommandsOK {
	return &ExecuteDeviceCommandsOK{}
}

/*ExecuteDeviceCommandsOK handles this case with default header values.

Created commands.
*/
type ExecuteDeviceCommandsOK struct {
	Payload models.CreateDeviceCommandsResponse
}

func (o *ExecuteDeviceCommandsOK) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommandsOK  %+v", 200, o.Payload)
}

func (o *ExecuteDeviceCommandsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteDeviceCommandsBadRequest creates a ExecuteDeviceCommandsBadRequest with default headers values
func NewExecuteDeviceCommandsBadRequest() *ExecuteDeviceCommandsBadRequest {
	return &ExecuteDeviceCommandsBadRequest{}
}

/*ExecuteDeviceCommandsBadRequest handles this case with default header values.

Bad request
*/
type ExecuteDeviceCommandsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *ExecuteDeviceCommandsBadRequest) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommandsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteDeviceCommandsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteDeviceCommandsUnauthorized creates a ExecuteDeviceCommandsUnauthorized with default headers values
func NewExecuteDeviceCommandsUnauthorized() *ExecuteDeviceCommandsUnauthorized {
	return &ExecuteDeviceCommandsUnauthorized{}
}

/*ExecuteDeviceCommandsUnauthorized handles this case with default header values.

Not authenticated
*/
type ExecuteDeviceCommandsUnauthorized struct {
}

func (o *ExecuteDeviceCommandsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommandsUnauthorized ", 401)
}

func (o *ExecuteDeviceCommandsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecuteDeviceCommandsForbidden creates a ExecuteDeviceCommandsForbidden with default headers values
func NewExecuteDeviceCommandsForbidden() *ExecuteDeviceCommandsForbidden {
	return &ExecuteDeviceCommandsForbidden{}
}

/*ExecuteDeviceCommandsForbidden handles this case with default header values.

Not authorized
*/
type ExecuteDeviceCommandsForbidden struct {
}

func (o *ExecuteDeviceCommandsForbidden) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommandsForbidden ", 403)
}

func (o *ExecuteDeviceCommandsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecuteDeviceCommandsUnprocessableEntity creates a ExecuteDeviceCommandsUnprocessableEntity with default headers values
func NewExecuteDeviceCommandsUnprocessableEntity() *ExecuteDeviceCommandsUnprocessableEntity {
	return &ExecuteDeviceCommandsUnprocessableEntity{}
}

/*ExecuteDeviceCommandsUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type ExecuteDeviceCommandsUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *ExecuteDeviceCommandsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommandsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ExecuteDeviceCommandsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteDeviceCommandsTooManyRequests creates a ExecuteDeviceCommandsTooManyRequests with default headers values
func NewExecuteDeviceCommandsTooManyRequests() *ExecuteDeviceCommandsTooManyRequests {
	return &ExecuteDeviceCommandsTooManyRequests{}
}

/*ExecuteDeviceCommandsTooManyRequests handles this case with default header values.

Too many requests
*/
type ExecuteDeviceCommandsTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *ExecuteDeviceCommandsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommandsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecuteDeviceCommandsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteDeviceCommandsDefault creates a ExecuteDeviceCommandsDefault with default headers values
func NewExecuteDeviceCommandsDefault(code int) *ExecuteDeviceCommandsDefault {
	return &ExecuteDeviceCommandsDefault{
		_statusCode: code,
	}
}

/*ExecuteDeviceCommandsDefault handles this case with default header values.

Unexpected error
*/
type ExecuteDeviceCommandsDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the execute device commands default response
func (o *ExecuteDeviceCommandsDefault) Code() int {
	return o._statusCode
}

func (o *ExecuteDeviceCommandsDefault) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/commands][%d] executeDeviceCommands default  %+v", o._statusCode, o.Payload)
}

func (o *ExecuteDeviceCommandsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
