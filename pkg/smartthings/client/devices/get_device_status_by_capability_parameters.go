// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeviceStatusByCapabilityParams creates a new GetDeviceStatusByCapabilityParams object
// with the default values initialized.
func NewGetDeviceStatusByCapabilityParams() *GetDeviceStatusByCapabilityParams {
	var ()
	return &GetDeviceStatusByCapabilityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceStatusByCapabilityParamsWithTimeout creates a new GetDeviceStatusByCapabilityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeviceStatusByCapabilityParamsWithTimeout(timeout time.Duration) *GetDeviceStatusByCapabilityParams {
	var ()
	return &GetDeviceStatusByCapabilityParams{

		timeout: timeout,
	}
}

// NewGetDeviceStatusByCapabilityParamsWithContext creates a new GetDeviceStatusByCapabilityParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeviceStatusByCapabilityParamsWithContext(ctx context.Context) *GetDeviceStatusByCapabilityParams {
	var ()
	return &GetDeviceStatusByCapabilityParams{

		Context: ctx,
	}
}

// NewGetDeviceStatusByCapabilityParamsWithHTTPClient creates a new GetDeviceStatusByCapabilityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeviceStatusByCapabilityParamsWithHTTPClient(client *http.Client) *GetDeviceStatusByCapabilityParams {
	var ()
	return &GetDeviceStatusByCapabilityParams{
		HTTPClient: client,
	}
}

/*GetDeviceStatusByCapabilityParams contains all the parameters to send to the API endpoint
for the get device status by capability operation typically these are written to a http.Request
*/
type GetDeviceStatusByCapabilityParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*CapabilityID*/
	CapabilityID string
	/*ComponentID
	  The name of the component.

	*/
	ComponentID string
	/*DeviceID
	  the device ID

	*/
	DeviceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithTimeout(timeout time.Duration) *GetDeviceStatusByCapabilityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithContext(ctx context.Context) *GetDeviceStatusByCapabilityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithHTTPClient(client *http.Client) *GetDeviceStatusByCapabilityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithAuthorization(authorization string) *GetDeviceStatusByCapabilityParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCapabilityID adds the capabilityID to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithCapabilityID(capabilityID string) *GetDeviceStatusByCapabilityParams {
	o.SetCapabilityID(capabilityID)
	return o
}

// SetCapabilityID adds the capabilityId to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetCapabilityID(capabilityID string) {
	o.CapabilityID = capabilityID
}

// WithComponentID adds the componentID to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithComponentID(componentID string) *GetDeviceStatusByCapabilityParams {
	o.SetComponentID(componentID)
	return o
}

// SetComponentID adds the componentId to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetComponentID(componentID string) {
	o.ComponentID = componentID
}

// WithDeviceID adds the deviceID to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) WithDeviceID(deviceID string) *GetDeviceStatusByCapabilityParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get device status by capability params
func (o *GetDeviceStatusByCapabilityParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceStatusByCapabilityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param capabilityId
	if err := r.SetPathParam("capabilityId", o.CapabilityID); err != nil {
		return err
	}

	// path param componentId
	if err := r.SetPathParam("componentId", o.ComponentID); err != nil {
		return err
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
