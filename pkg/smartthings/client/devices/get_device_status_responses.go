// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetDeviceStatusReader is a Reader for the GetDeviceStatus structure.
type GetDeviceStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDeviceStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDeviceStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetDeviceStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetDeviceStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetDeviceStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetDeviceStatusDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDeviceStatusOK creates a GetDeviceStatusOK with default headers values
func NewGetDeviceStatusOK() *GetDeviceStatusOK {
	return &GetDeviceStatusOK{}
}

/*GetDeviceStatusOK handles this case with default header values.

successful return of current status of device attributes
*/
type GetDeviceStatusOK struct {
	Payload *models.DeviceStatus
}

func (o *GetDeviceStatusOK) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/status][%d] getDeviceStatusOK  %+v", 200, o.Payload)
}

func (o *GetDeviceStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceStatusBadRequest creates a GetDeviceStatusBadRequest with default headers values
func NewGetDeviceStatusBadRequest() *GetDeviceStatusBadRequest {
	return &GetDeviceStatusBadRequest{}
}

/*GetDeviceStatusBadRequest handles this case with default header values.

Bad request
*/
type GetDeviceStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetDeviceStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/status][%d] getDeviceStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetDeviceStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceStatusUnauthorized creates a GetDeviceStatusUnauthorized with default headers values
func NewGetDeviceStatusUnauthorized() *GetDeviceStatusUnauthorized {
	return &GetDeviceStatusUnauthorized{}
}

/*GetDeviceStatusUnauthorized handles this case with default header values.

Not authenticated
*/
type GetDeviceStatusUnauthorized struct {
}

func (o *GetDeviceStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/status][%d] getDeviceStatusUnauthorized ", 401)
}

func (o *GetDeviceStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceStatusForbidden creates a GetDeviceStatusForbidden with default headers values
func NewGetDeviceStatusForbidden() *GetDeviceStatusForbidden {
	return &GetDeviceStatusForbidden{}
}

/*GetDeviceStatusForbidden handles this case with default header values.

Not authorized
*/
type GetDeviceStatusForbidden struct {
}

func (o *GetDeviceStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/status][%d] getDeviceStatusForbidden ", 403)
}

func (o *GetDeviceStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceStatusTooManyRequests creates a GetDeviceStatusTooManyRequests with default headers values
func NewGetDeviceStatusTooManyRequests() *GetDeviceStatusTooManyRequests {
	return &GetDeviceStatusTooManyRequests{}
}

/*GetDeviceStatusTooManyRequests handles this case with default header values.

Too many requests
*/
type GetDeviceStatusTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetDeviceStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/status][%d] getDeviceStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDeviceStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceStatusDefault creates a GetDeviceStatusDefault with default headers values
func NewGetDeviceStatusDefault(code int) *GetDeviceStatusDefault {
	return &GetDeviceStatusDefault{
		_statusCode: code,
	}
}

/*GetDeviceStatusDefault handles this case with default header values.

Unexpected error
*/
type GetDeviceStatusDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get device status default response
func (o *GetDeviceStatusDefault) Code() int {
	return o._statusCode
}

func (o *GetDeviceStatusDefault) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/status][%d] getDeviceStatus default  %+v", o._statusCode, o.Payload)
}

func (o *GetDeviceStatusDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
