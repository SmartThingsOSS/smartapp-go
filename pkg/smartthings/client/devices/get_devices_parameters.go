// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDevicesParams creates a new GetDevicesParams object
// with the default values initialized.
func NewGetDevicesParams() *GetDevicesParams {
	var ()
	return &GetDevicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDevicesParamsWithTimeout creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDevicesParamsWithTimeout(timeout time.Duration) *GetDevicesParams {
	var ()
	return &GetDevicesParams{

		timeout: timeout,
	}
}

// NewGetDevicesParamsWithContext creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDevicesParamsWithContext(ctx context.Context) *GetDevicesParams {
	var ()
	return &GetDevicesParams{

		Context: ctx,
	}
}

// NewGetDevicesParamsWithHTTPClient creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDevicesParamsWithHTTPClient(client *http.Client) *GetDevicesParams {
	var ()
	return &GetDevicesParams{
		HTTPClient: client,
	}
}

/*GetDevicesParams contains all the parameters to send to the API endpoint
for the get devices operation typically these are written to a http.Request
*/
type GetDevicesParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*Capability
	  The device capabilities to filter the results by.
	The capabilities are treated as an "and" so all capabilities must be present.


	*/
	Capability []string
	/*DeviceID
	  The device ids to filter the results by.


	*/
	DeviceID []string
	/*LocationID
	  The device locations to filter the results by.


	*/
	LocationID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get devices params
func (o *GetDevicesParams) WithTimeout(timeout time.Duration) *GetDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get devices params
func (o *GetDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get devices params
func (o *GetDevicesParams) WithContext(ctx context.Context) *GetDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get devices params
func (o *GetDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get devices params
func (o *GetDevicesParams) WithHTTPClient(client *http.Client) *GetDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get devices params
func (o *GetDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get devices params
func (o *GetDevicesParams) WithAuthorization(authorization string) *GetDevicesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get devices params
func (o *GetDevicesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCapability adds the capability to the get devices params
func (o *GetDevicesParams) WithCapability(capability []string) *GetDevicesParams {
	o.SetCapability(capability)
	return o
}

// SetCapability adds the capability to the get devices params
func (o *GetDevicesParams) SetCapability(capability []string) {
	o.Capability = capability
}

// WithDeviceID adds the deviceID to the get devices params
func (o *GetDevicesParams) WithDeviceID(deviceID []string) *GetDevicesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get devices params
func (o *GetDevicesParams) SetDeviceID(deviceID []string) {
	o.DeviceID = deviceID
}

// WithLocationID adds the locationID to the get devices params
func (o *GetDevicesParams) WithLocationID(locationID []string) *GetDevicesParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the get devices params
func (o *GetDevicesParams) SetLocationID(locationID []string) {
	o.LocationID = locationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	valuesCapability := o.Capability

	joinedCapability := swag.JoinByFormat(valuesCapability, "multi")
	// query array param capability
	if err := r.SetQueryParam("capability", joinedCapability...); err != nil {
		return err
	}

	valuesDeviceID := o.DeviceID

	joinedDeviceID := swag.JoinByFormat(valuesDeviceID, "multi")
	// query array param deviceId
	if err := r.SetQueryParam("deviceId", joinedDeviceID...); err != nil {
		return err
	}

	valuesLocationID := o.LocationID

	joinedLocationID := swag.JoinByFormat(valuesLocationID, "multi")
	// query array param locationId
	if err := r.SetQueryParam("locationId", joinedLocationID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
