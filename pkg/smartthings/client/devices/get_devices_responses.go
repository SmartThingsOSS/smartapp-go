// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetDevicesReader is a Reader for the GetDevices structure.
type GetDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDevicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetDevicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetDevicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetDevicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetDevicesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDevicesOK creates a GetDevicesOK with default headers values
func NewGetDevicesOK() *GetDevicesOK {
	return &GetDevicesOK{}
}

/*GetDevicesOK handles this case with default header values.

A list of devices.
*/
type GetDevicesOK struct {
	Payload *models.PagedDevices
}

func (o *GetDevicesOK) Error() string {
	return fmt.Sprintf("[GET /devices][%d] getDevicesOK  %+v", 200, o.Payload)
}

func (o *GetDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedDevices)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesBadRequest creates a GetDevicesBadRequest with default headers values
func NewGetDevicesBadRequest() *GetDevicesBadRequest {
	return &GetDevicesBadRequest{}
}

/*GetDevicesBadRequest handles this case with default header values.

Bad request
*/
type GetDevicesBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetDevicesBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices][%d] getDevicesBadRequest  %+v", 400, o.Payload)
}

func (o *GetDevicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesUnauthorized creates a GetDevicesUnauthorized with default headers values
func NewGetDevicesUnauthorized() *GetDevicesUnauthorized {
	return &GetDevicesUnauthorized{}
}

/*GetDevicesUnauthorized handles this case with default header values.

Not authenticated
*/
type GetDevicesUnauthorized struct {
}

func (o *GetDevicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices][%d] getDevicesUnauthorized ", 401)
}

func (o *GetDevicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesForbidden creates a GetDevicesForbidden with default headers values
func NewGetDevicesForbidden() *GetDevicesForbidden {
	return &GetDevicesForbidden{}
}

/*GetDevicesForbidden handles this case with default header values.

Not authorized
*/
type GetDevicesForbidden struct {
}

func (o *GetDevicesForbidden) Error() string {
	return fmt.Sprintf("[GET /devices][%d] getDevicesForbidden ", 403)
}

func (o *GetDevicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesTooManyRequests creates a GetDevicesTooManyRequests with default headers values
func NewGetDevicesTooManyRequests() *GetDevicesTooManyRequests {
	return &GetDevicesTooManyRequests{}
}

/*GetDevicesTooManyRequests handles this case with default header values.

Too many requests
*/
type GetDevicesTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetDevicesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /devices][%d] getDevicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDevicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesDefault creates a GetDevicesDefault with default headers values
func NewGetDevicesDefault(code int) *GetDevicesDefault {
	return &GetDevicesDefault{
		_statusCode: code,
	}
}

/*GetDevicesDefault handles this case with default header values.

Unexpected error
*/
type GetDevicesDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get devices default response
func (o *GetDevicesDefault) Code() int {
	return o._statusCode
}

func (o *GetDevicesDefault) Error() string {
	return fmt.Sprintf("[GET /devices][%d] getDevices default  %+v", o._statusCode, o.Payload)
}

func (o *GetDevicesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
