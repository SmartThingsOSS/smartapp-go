// Code generated by go-swagger; DO NOT EDIT.

package installedapps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListInstallationsParams creates a new ListInstallationsParams object
// with the default values initialized.
func NewListInstallationsParams() *ListInstallationsParams {
	var ()
	return &ListInstallationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListInstallationsParamsWithTimeout creates a new ListInstallationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListInstallationsParamsWithTimeout(timeout time.Duration) *ListInstallationsParams {
	var ()
	return &ListInstallationsParams{

		timeout: timeout,
	}
}

// NewListInstallationsParamsWithContext creates a new ListInstallationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListInstallationsParamsWithContext(ctx context.Context) *ListInstallationsParams {
	var ()
	return &ListInstallationsParams{

		Context: ctx,
	}
}

// NewListInstallationsParamsWithHTTPClient creates a new ListInstallationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListInstallationsParamsWithHTTPClient(client *http.Client) *ListInstallationsParams {
	var ()
	return &ListInstallationsParams{
		HTTPClient: client,
	}
}

/*ListInstallationsParams contains all the parameters to send to the API endpoint
for the list installations operation typically these are written to a http.Request
*/
type ListInstallationsParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*InstalledAppStatus
	  State of the Installed App.

	*/
	InstalledAppStatus *string
	/*LocationID
	  The ID of the location that both the installed smart app and source are associated with.

	*/
	LocationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list installations params
func (o *ListInstallationsParams) WithTimeout(timeout time.Duration) *ListInstallationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list installations params
func (o *ListInstallationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list installations params
func (o *ListInstallationsParams) WithContext(ctx context.Context) *ListInstallationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list installations params
func (o *ListInstallationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list installations params
func (o *ListInstallationsParams) WithHTTPClient(client *http.Client) *ListInstallationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list installations params
func (o *ListInstallationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the list installations params
func (o *ListInstallationsParams) WithAuthorization(authorization string) *ListInstallationsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the list installations params
func (o *ListInstallationsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithInstalledAppStatus adds the installedAppStatus to the list installations params
func (o *ListInstallationsParams) WithInstalledAppStatus(installedAppStatus *string) *ListInstallationsParams {
	o.SetInstalledAppStatus(installedAppStatus)
	return o
}

// SetInstalledAppStatus adds the installedAppStatus to the list installations params
func (o *ListInstallationsParams) SetInstalledAppStatus(installedAppStatus *string) {
	o.InstalledAppStatus = installedAppStatus
}

// WithLocationID adds the locationID to the list installations params
func (o *ListInstallationsParams) WithLocationID(locationID string) *ListInstallationsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list installations params
func (o *ListInstallationsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WriteToRequest writes these params to a swagger request
func (o *ListInstallationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.InstalledAppStatus != nil {

		// query param installedAppStatus
		var qrInstalledAppStatus string
		if o.InstalledAppStatus != nil {
			qrInstalledAppStatus = *o.InstalledAppStatus
		}
		qInstalledAppStatus := qrInstalledAppStatus
		if qInstalledAppStatus != "" {
			if err := r.SetQueryParam("installedAppStatus", qInstalledAppStatus); err != nil {
				return err
			}
		}

	}

	// query param locationId
	qrLocationID := o.LocationID
	qLocationID := qrLocationID
	if qLocationID != "" {
		if err := r.SetQueryParam("locationId", qLocationID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
