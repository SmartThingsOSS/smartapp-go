// Code generated by go-swagger; DO NOT EDIT.

package locations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetLocationReader is a Reader for the GetLocation structure.
type GetLocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetLocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetLocationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetLocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetLocationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetLocationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLocationOK creates a GetLocationOK with default headers values
func NewGetLocationOK() *GetLocationOK {
	return &GetLocationOK{}
}

/*GetLocationOK handles this case with default header values.

A Location.
*/
type GetLocationOK struct {
	Payload *models.Location
}

func (o *GetLocationOK) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}][%d] getLocationOK  %+v", 200, o.Payload)
}

func (o *GetLocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Location)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationBadRequest creates a GetLocationBadRequest with default headers values
func NewGetLocationBadRequest() *GetLocationBadRequest {
	return &GetLocationBadRequest{}
}

/*GetLocationBadRequest handles this case with default header values.

Bad request
*/
type GetLocationBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetLocationBadRequest) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}][%d] getLocationBadRequest  %+v", 400, o.Payload)
}

func (o *GetLocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationUnauthorized creates a GetLocationUnauthorized with default headers values
func NewGetLocationUnauthorized() *GetLocationUnauthorized {
	return &GetLocationUnauthorized{}
}

/*GetLocationUnauthorized handles this case with default header values.

Not authenticated
*/
type GetLocationUnauthorized struct {
}

func (o *GetLocationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}][%d] getLocationUnauthorized ", 401)
}

func (o *GetLocationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLocationForbidden creates a GetLocationForbidden with default headers values
func NewGetLocationForbidden() *GetLocationForbidden {
	return &GetLocationForbidden{}
}

/*GetLocationForbidden handles this case with default header values.

Not authorized
*/
type GetLocationForbidden struct {
}

func (o *GetLocationForbidden) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}][%d] getLocationForbidden ", 403)
}

func (o *GetLocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLocationTooManyRequests creates a GetLocationTooManyRequests with default headers values
func NewGetLocationTooManyRequests() *GetLocationTooManyRequests {
	return &GetLocationTooManyRequests{}
}

/*GetLocationTooManyRequests handles this case with default header values.

Too many requests
*/
type GetLocationTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetLocationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}][%d] getLocationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLocationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocationDefault creates a GetLocationDefault with default headers values
func NewGetLocationDefault(code int) *GetLocationDefault {
	return &GetLocationDefault{
		_statusCode: code,
	}
}

/*GetLocationDefault handles this case with default header values.

Unexpected error
*/
type GetLocationDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get location default response
func (o *GetLocationDefault) Code() int {
	return o._statusCode
}

func (o *GetLocationDefault) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}][%d] getLocation default  %+v", o._statusCode, o.Payload)
}

func (o *GetLocationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
