// Code generated by go-swagger; DO NOT EDIT.

package modes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// ChangeModeReader is a Reader for the ChangeMode structure.
type ChangeModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChangeModeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewChangeModeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewChangeModeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewChangeModeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewChangeModeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewChangeModeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewChangeModeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangeModeOK creates a ChangeModeOK with default headers values
func NewChangeModeOK() *ChangeModeOK {
	return &ChangeModeOK{}
}

/*ChangeModeOK handles this case with default header values.

Changed successfully.
*/
type ChangeModeOK struct {
	Payload *models.Mode
}

func (o *ChangeModeOK) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeModeOK  %+v", 200, o.Payload)
}

func (o *ChangeModeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Mode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeModeBadRequest creates a ChangeModeBadRequest with default headers values
func NewChangeModeBadRequest() *ChangeModeBadRequest {
	return &ChangeModeBadRequest{}
}

/*ChangeModeBadRequest handles this case with default header values.

Bad request
*/
type ChangeModeBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *ChangeModeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeModeBadRequest  %+v", 400, o.Payload)
}

func (o *ChangeModeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeModeUnauthorized creates a ChangeModeUnauthorized with default headers values
func NewChangeModeUnauthorized() *ChangeModeUnauthorized {
	return &ChangeModeUnauthorized{}
}

/*ChangeModeUnauthorized handles this case with default header values.

Unauthorized
*/
type ChangeModeUnauthorized struct {
}

func (o *ChangeModeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeModeUnauthorized ", 401)
}

func (o *ChangeModeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangeModeForbidden creates a ChangeModeForbidden with default headers values
func NewChangeModeForbidden() *ChangeModeForbidden {
	return &ChangeModeForbidden{}
}

/*ChangeModeForbidden handles this case with default header values.

Forbidden
*/
type ChangeModeForbidden struct {
}

func (o *ChangeModeForbidden) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeModeForbidden ", 403)
}

func (o *ChangeModeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangeModeUnprocessableEntity creates a ChangeModeUnprocessableEntity with default headers values
func NewChangeModeUnprocessableEntity() *ChangeModeUnprocessableEntity {
	return &ChangeModeUnprocessableEntity{}
}

/*ChangeModeUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type ChangeModeUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *ChangeModeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeModeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ChangeModeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeModeTooManyRequests creates a ChangeModeTooManyRequests with default headers values
func NewChangeModeTooManyRequests() *ChangeModeTooManyRequests {
	return &ChangeModeTooManyRequests{}
}

/*ChangeModeTooManyRequests handles this case with default header values.

Too many requests
*/
type ChangeModeTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *ChangeModeTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeModeTooManyRequests  %+v", 429, o.Payload)
}

func (o *ChangeModeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeModeDefault creates a ChangeModeDefault with default headers values
func NewChangeModeDefault(code int) *ChangeModeDefault {
	return &ChangeModeDefault{
		_statusCode: code,
	}
}

/*ChangeModeDefault handles this case with default header values.

Unexpected error
*/
type ChangeModeDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the change mode default response
func (o *ChangeModeDefault) Code() int {
	return o._statusCode
}

func (o *ChangeModeDefault) Error() string {
	return fmt.Sprintf("[PUT /locations/{locationId}/modes/current][%d] changeMode default  %+v", o._statusCode, o.Payload)
}

func (o *ChangeModeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
