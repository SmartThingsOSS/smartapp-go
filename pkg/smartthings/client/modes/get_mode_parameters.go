// Code generated by go-swagger; DO NOT EDIT.

package modes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetModeParams creates a new GetModeParams object
// with the default values initialized.
func NewGetModeParams() *GetModeParams {
	var ()
	return &GetModeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetModeParamsWithTimeout creates a new GetModeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetModeParamsWithTimeout(timeout time.Duration) *GetModeParams {
	var ()
	return &GetModeParams{

		timeout: timeout,
	}
}

// NewGetModeParamsWithContext creates a new GetModeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetModeParamsWithContext(ctx context.Context) *GetModeParams {
	var ()
	return &GetModeParams{

		Context: ctx,
	}
}

// NewGetModeParamsWithHTTPClient creates a new GetModeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetModeParamsWithHTTPClient(client *http.Client) *GetModeParams {
	var ()
	return &GetModeParams{
		HTTPClient: client,
	}
}

/*GetModeParams contains all the parameters to send to the API endpoint
for the get mode operation typically these are written to a http.Request
*/
type GetModeParams struct {

	/*AcceptLanguage
	  Language header representing the client's preferred language. The format of the `Accept-Language` header follows what is defined in [RFC 7231, section 5.3.5](https://tools.ietf.org/html/rfc7231#section-5.3.5)

	*/
	AcceptLanguage *string
	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*LocationID
	  The ID of the location.

	*/
	LocationID string
	/*ModeID
	  The ID of the Mode.

	*/
	ModeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get mode params
func (o *GetModeParams) WithTimeout(timeout time.Duration) *GetModeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get mode params
func (o *GetModeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get mode params
func (o *GetModeParams) WithContext(ctx context.Context) *GetModeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get mode params
func (o *GetModeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get mode params
func (o *GetModeParams) WithHTTPClient(client *http.Client) *GetModeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get mode params
func (o *GetModeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the get mode params
func (o *GetModeParams) WithAcceptLanguage(acceptLanguage *string) *GetModeParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the get mode params
func (o *GetModeParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithAuthorization adds the authorization to the get mode params
func (o *GetModeParams) WithAuthorization(authorization string) *GetModeParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get mode params
func (o *GetModeParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithLocationID adds the locationID to the get mode params
func (o *GetModeParams) WithLocationID(locationID string) *GetModeParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the get mode params
func (o *GetModeParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithModeID adds the modeID to the get mode params
func (o *GetModeParams) WithModeID(modeID string) *GetModeParams {
	o.SetModeID(modeID)
	return o
}

// SetModeID adds the modeId to the get mode params
func (o *GetModeParams) SetModeID(modeID string) {
	o.ModeID = modeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetModeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// header param Accept-Language
		if err := r.SetHeaderParam("Accept-Language", *o.AcceptLanguage); err != nil {
			return err
		}

	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// path param modeId
	if err := r.SetPathParam("modeId", o.ModeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
