// Code generated by go-swagger; DO NOT EDIT.

package modes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetModeReader is a Reader for the GetMode structure.
type GetModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetModeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetModeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetModeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetModeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetModeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetModeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetModeOK creates a GetModeOK with default headers values
func NewGetModeOK() *GetModeOK {
	return &GetModeOK{}
}

/*GetModeOK handles this case with default header values.

The Mode.
*/
type GetModeOK struct {
	/*This header field describes the natural language(s) of the intended audience for the representation. This can have multiple values as per [RFC 7231, section 3.1.3.2](https://tools.ietf.org/html/rfc7231#section-3.1.3.2)
	 */
	ContentLanguage string

	Payload *models.Mode
}

func (o *GetModeOK) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/modes/{modeId}][%d] getModeOK  %+v", 200, o.Payload)
}

func (o *GetModeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Language
	o.ContentLanguage = response.GetHeader("Content-Language")

	o.Payload = new(models.Mode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModeBadRequest creates a GetModeBadRequest with default headers values
func NewGetModeBadRequest() *GetModeBadRequest {
	return &GetModeBadRequest{}
}

/*GetModeBadRequest handles this case with default header values.

Bad request
*/
type GetModeBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetModeBadRequest) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/modes/{modeId}][%d] getModeBadRequest  %+v", 400, o.Payload)
}

func (o *GetModeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModeUnauthorized creates a GetModeUnauthorized with default headers values
func NewGetModeUnauthorized() *GetModeUnauthorized {
	return &GetModeUnauthorized{}
}

/*GetModeUnauthorized handles this case with default header values.

Unauthorized
*/
type GetModeUnauthorized struct {
}

func (o *GetModeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/modes/{modeId}][%d] getModeUnauthorized ", 401)
}

func (o *GetModeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetModeForbidden creates a GetModeForbidden with default headers values
func NewGetModeForbidden() *GetModeForbidden {
	return &GetModeForbidden{}
}

/*GetModeForbidden handles this case with default header values.

Forbidden
*/
type GetModeForbidden struct {
}

func (o *GetModeForbidden) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/modes/{modeId}][%d] getModeForbidden ", 403)
}

func (o *GetModeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetModeTooManyRequests creates a GetModeTooManyRequests with default headers values
func NewGetModeTooManyRequests() *GetModeTooManyRequests {
	return &GetModeTooManyRequests{}
}

/*GetModeTooManyRequests handles this case with default header values.

Too many requests
*/
type GetModeTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetModeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/modes/{modeId}][%d] getModeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetModeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModeDefault creates a GetModeDefault with default headers values
func NewGetModeDefault(code int) *GetModeDefault {
	return &GetModeDefault{
		_statusCode: code,
	}
}

/*GetModeDefault handles this case with default header values.

Unexpected error
*/
type GetModeDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get mode default response
func (o *GetModeDefault) Code() int {
	return o._statusCode
}

func (o *GetModeDefault) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/modes/{modeId}][%d] getMode default  %+v", o._statusCode, o.Payload)
}

func (o *GetModeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
