// Code generated by go-swagger; DO NOT EDIT.

package modes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new modes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for modes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeMode changes the location s current mode

Change the location's current mode.
*/
func (a *Client) ChangeMode(params *ChangeModeParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeMode",
		Method:             "PUT",
		PathPattern:        "/locations/{locationId}/modes/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeModeOK), nil

}

/*
GetCurrentMode gets the current location mode

Get current Mode of a Location.
*/
func (a *Client) GetCurrentMode(params *GetCurrentModeParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentMode",
		Method:             "GET",
		PathPattern:        "/locations/{locationId}/modes/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentModeOK), nil

}

/*
GetMode gets a mode

Get a specific Mode from a Location.
*/
func (a *Client) GetMode(params *GetModeParams, authInfo runtime.ClientAuthInfoWriter) (*GetModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMode",
		Method:             "GET",
		PathPattern:        "/locations/{locationId}/modes/{modeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetModeOK), nil

}

/*
GetModes gets the modes of a location

Get the Modes of a Location from a user's account.
*/
func (a *Client) GetModes(params *GetModesParams, authInfo runtime.ClientAuthInfoWriter) (*GetModesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getModes",
		Method:             "GET",
		PathPattern:        "/locations/{locationId}/modes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetModesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetModesOK), nil

}

/*
UpdateMode updates a mode

Update a Mode.
*/
func (a *Client) UpdateMode(params *UpdateModeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMode",
		Method:             "PUT",
		PathPattern:        "/locations/{locationId}/modes/{modeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateModeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
