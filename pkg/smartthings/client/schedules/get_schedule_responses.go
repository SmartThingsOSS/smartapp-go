// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SmartThingsOSS/smartapp-go/pkg/smartthings/models"
)

// GetScheduleReader is a Reader for the GetSchedule structure.
type GetScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetScheduleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetScheduleOK creates a GetScheduleOK with default headers values
func NewGetScheduleOK() *GetScheduleOK {
	return &GetScheduleOK{}
}

/*GetScheduleOK handles this case with default header values.

The schedule
*/
type GetScheduleOK struct {
	Payload *models.Schedule
}

func (o *GetScheduleOK) Error() string {
	return fmt.Sprintf("[GET /installedapps/{installedAppId}/schedules/{scheduleName}][%d] getScheduleOK  %+v", 200, o.Payload)
}

func (o *GetScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Schedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleBadRequest creates a GetScheduleBadRequest with default headers values
func NewGetScheduleBadRequest() *GetScheduleBadRequest {
	return &GetScheduleBadRequest{}
}

/*GetScheduleBadRequest handles this case with default header values.

Bad request
*/
type GetScheduleBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetScheduleBadRequest) Error() string {
	return fmt.Sprintf("[GET /installedapps/{installedAppId}/schedules/{scheduleName}][%d] getScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *GetScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleUnauthorized creates a GetScheduleUnauthorized with default headers values
func NewGetScheduleUnauthorized() *GetScheduleUnauthorized {
	return &GetScheduleUnauthorized{}
}

/*GetScheduleUnauthorized handles this case with default header values.

Not authenticated
*/
type GetScheduleUnauthorized struct {
}

func (o *GetScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /installedapps/{installedAppId}/schedules/{scheduleName}][%d] getScheduleUnauthorized ", 401)
}

func (o *GetScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetScheduleForbidden creates a GetScheduleForbidden with default headers values
func NewGetScheduleForbidden() *GetScheduleForbidden {
	return &GetScheduleForbidden{}
}

/*GetScheduleForbidden handles this case with default header values.

Not authorized
*/
type GetScheduleForbidden struct {
}

func (o *GetScheduleForbidden) Error() string {
	return fmt.Sprintf("[GET /installedapps/{installedAppId}/schedules/{scheduleName}][%d] getScheduleForbidden ", 403)
}

func (o *GetScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetScheduleTooManyRequests creates a GetScheduleTooManyRequests with default headers values
func NewGetScheduleTooManyRequests() *GetScheduleTooManyRequests {
	return &GetScheduleTooManyRequests{}
}

/*GetScheduleTooManyRequests handles this case with default header values.

Too many requests
*/
type GetScheduleTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /installedapps/{installedAppId}/schedules/{scheduleName}][%d] getScheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleDefault creates a GetScheduleDefault with default headers values
func NewGetScheduleDefault(code int) *GetScheduleDefault {
	return &GetScheduleDefault{
		_statusCode: code,
	}
}

/*GetScheduleDefault handles this case with default header values.

Unexpected error
*/
type GetScheduleDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get schedule default response
func (o *GetScheduleDefault) Code() int {
	return o._statusCode
}

func (o *GetScheduleDefault) Error() string {
	return fmt.Sprintf("[GET /installedapps/{installedAppId}/schedules/{scheduleName}][%d] getSchedule default  %+v", o._statusCode, o.Payload)
}

func (o *GetScheduleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
