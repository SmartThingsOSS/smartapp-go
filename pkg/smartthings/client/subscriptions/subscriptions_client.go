// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAllSubscriptions deletes all of an installed app s subscriptions

Delete all subscriptions for the installed app.

*/
func (a *Client) DeleteAllSubscriptions(params *DeleteAllSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllSubscriptions",
		Method:             "DELETE",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAllSubscriptionsOK), nil

}

/*
DeleteSubscription deletes an installed app s subscription

Delete a specific subscription for the installed app.

*/
func (a *Client) DeleteSubscription(params *DeleteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubscription",
		Method:             "DELETE",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubscriptionOK), nil

}

/*
GetSubscription gets an installed app s subscription

Get a specific subscription for the installed app.

*/
func (a *Client) GetSubscription(params *GetSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubscription",
		Method:             "GET",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubscriptionOK), nil

}

/*
ListSubscriptions lists an installed app s subscriptions

List the subscriptions for the installed app.

*/
func (a *Client) ListSubscriptions(params *ListSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSubscriptions",
		Method:             "GET",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSubscriptionsOK), nil

}

/*
SaveSubscription creates a subscription for an installed app

Create a subscription to a type of event from the specified source.
Both the source and the installed app must be in the location specified
and the installed app must have read access to the event being subscribed to.

### Authorization scopes
For installed app principal:
* installed app id matches the incoming request installed app id
* if the subscription is a device subscription then there must be a `r:devices:$deviceId` scope
* if it is a capability subscription then the location must match the installed app location, and there must be a `r:devices:*:$capability` or `r:devices:*` scope

For user token:
* user must have ability to read the installed app
* if the subscription is a device subscription then the user must be able to access the device
* if it is a capability subscription then the location must match the installed apps location

*/
func (a *Client) SaveSubscription(params *SaveSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*SaveSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveSubscription",
		Method:             "POST",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveSubscriptionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
