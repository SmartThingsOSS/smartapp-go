// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateLocationRequest create location request
// swagger:model CreateLocationRequest
type CreateLocationRequest struct {

	// An ISO Alpha-3 country code.  (i.e. GBR, USA)
	// Required: true
	CountryCode *string `json:"countryCode"`

	// A geographical latitude.
	Latitude float32 `json:"latitude,omitempty"`

	// An IETF BCP 47 language tag representing the chosen locale for this location.
	Locale string `json:"locale,omitempty"`

	// A geographical longitude.
	Longitude float32 `json:"longitude,omitempty"`

	// A nickname given for the location (eg. Home)
	// Required: true
	Name *string `json:"name"`

	// The radius in meters around latitude and longitude which defines this location.
	RegionRadius int64 `json:"regionRadius,omitempty"`

	// The desired temperature scale used within location.
	// Enum: [F C]
	TemperatureScale string `json:"temperatureScale,omitempty"`
}

// Validate validates this create location request
func (m *CreateLocationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatureScale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateLocationRequest) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *CreateLocationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createLocationRequestTypeTemperatureScalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["F","C"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createLocationRequestTypeTemperatureScalePropEnum = append(createLocationRequestTypeTemperatureScalePropEnum, v)
	}
}

const (

	// CreateLocationRequestTemperatureScaleF captures enum value "F"
	CreateLocationRequestTemperatureScaleF string = "F"

	// CreateLocationRequestTemperatureScaleC captures enum value "C"
	CreateLocationRequestTemperatureScaleC string = "C"
)

// prop value enum
func (m *CreateLocationRequest) validateTemperatureScaleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createLocationRequestTypeTemperatureScalePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateLocationRequest) validateTemperatureScale(formats strfmt.Registry) error {

	if swag.IsZero(m.TemperatureScale) { // not required
		return nil
	}

	// value enum
	if err := m.validateTemperatureScaleEnum("temperatureScale", "body", m.TemperatureScale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateLocationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateLocationRequest) UnmarshalBinary(b []byte) error {
	var res CreateLocationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
