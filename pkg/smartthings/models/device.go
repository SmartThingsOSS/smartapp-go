// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Device device
// swagger:model Device
type Device struct {

	// Device Profile information for the SmartApp. This field will be empty if device type is not ENDPOINT_APP.
	App *AppDeviceDetails `json:"app,omitempty"`

	// The IDs of all components on the device.
	Components []*DeviceComponent `json:"components"`

	// The identifier for the device instance.
	DeviceID string `json:"deviceId,omitempty"`

	// The device manufacturer code.
	DeviceManufacturerCode string `json:"deviceManufacturerCode,omitempty"`

	// Deprecated please look under "dth".
	DeviceNetworkType string `json:"deviceNetworkType,omitempty"`

	// Deprecated please look under "dth".
	DeviceTypeID string `json:"deviceTypeId,omitempty"`

	// Deprecated please look under "dth".
	DeviceTypeName string `json:"deviceTypeName,omitempty"`

	// Device Profile information for DTH. This field will be empty if device type is not DTH.
	Dth *DthDeviceDetails `json:"dth,omitempty"`

	// The name that a user chooses for the device. This defaults to the same value as name.
	Label string `json:"label,omitempty"`

	// The ID of the Location with which the device is associated.
	LocationID string `json:"locationId,omitempty"`

	// The name that the device integration (Device Handler or SmartApp) defines for the device.
	Name string `json:"name,omitempty"`

	// type
	Type DeviceIntegrationType `json:"type,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateApp(formats strfmt.Registry) error {

	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Device) validateDth(formats strfmt.Registry) error {

	if swag.IsZero(m.Dth) { // not required
		return nil
	}

	if m.Dth != nil {
		if err := m.Dth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dth")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
