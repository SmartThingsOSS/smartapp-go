// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceCommand device command
// swagger:model DeviceCommand
type DeviceCommand struct {

	// Arguments of the command.
	// The type of the arguments are dependent on the type of the capability's command argument
	//
	Arguments []interface{} `json:"arguments"`

	// Capability that this command relates to. This must be a capability of the component.
	// Required: true
	Capability *string `json:"capability"`

	// Name of the command, this must be valid for the capability.
	// Required: true
	Command *string `json:"command"`

	// The name of the component on this device, default is 'main'. The component must be valid for the device.
	Component *string `json:"component,omitempty"`
}

// Validate validates this device command
func (m *DeviceCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCommand) validateCapability(formats strfmt.Registry) error {

	if err := validate.Required("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *DeviceCommand) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceCommand) UnmarshalBinary(b []byte) error {
	var res DeviceCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
