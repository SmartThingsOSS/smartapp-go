// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceComponentReference device component reference
// swagger:model DeviceComponentReference
type DeviceComponentReference struct {

	// A list of `[ 1..20 ]` capabilities for this component.
	// Required: true
	// Max Items: 20
	// Min Items: 1
	Capabilities []*CapabilityReference `json:"capabilities"`

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this device component reference
func (m *DeviceComponentReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceComponentReference) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("capabilities", "body", m.Capabilities); err != nil {
		return err
	}

	iCapabilitiesSize := int64(len(m.Capabilities))

	if err := validate.MinItems("capabilities", "body", iCapabilitiesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("capabilities", "body", iCapabilitiesSize, 20); err != nil {
		return err
	}

	for i := 0; i < len(m.Capabilities); i++ {
		if swag.IsZero(m.Capabilities[i]) { // not required
			continue
		}

		if m.Capabilities[i] != nil {
			if err := m.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceComponentReference) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceComponentReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceComponentReference) UnmarshalBinary(b []byte) error {
	var res DeviceComponentReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
