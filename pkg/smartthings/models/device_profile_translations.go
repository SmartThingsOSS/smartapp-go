// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceProfileTranslations device profile translations
// swagger:model DeviceProfileTranslations
type DeviceProfileTranslations struct {

	// A map of component ID to it's translations.
	Components map[string]ComponentTranslations `json:"components,omitempty"`

	// tag
	Tag LocaleTag `json:"tag,omitempty"`
}

// Validate validates this device profile translations
func (m *DeviceProfileTranslations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceProfileTranslations) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for k := range m.Components {

		if err := validate.Required("components"+"."+k, "body", m.Components[k]); err != nil {
			return err
		}
		if val, ok := m.Components[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DeviceProfileTranslations) validateTag(formats strfmt.Registry) error {

	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if err := m.Tag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tag")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceProfileTranslations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceProfileTranslations) UnmarshalBinary(b []byte) error {
	var res DeviceProfileTranslations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
