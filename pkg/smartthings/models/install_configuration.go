// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstallConfiguration An configuration instance of an Installed App.
// swagger:model InstallConfiguration
type InstallConfiguration struct {

	// The ID to this configuration instance.
	// Format: uuid
	ConfigurationID strfmt.UUID `json:"configurationId,omitempty"`

	// configuration status
	ConfigurationStatus InstallConfigurationStatus `json:"configurationStatus,omitempty"`

	// A UTC ISO-8601 Date-Time String
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// The ID of the installed app.
	// Format: uuid
	InstalledAppID strfmt.UUID `json:"installedAppId,omitempty"`

	// A UTC ISO-8601 Date-Time String
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`
}

// Validate validates this install configuration
func (m *InstallConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallConfiguration) validateConfigurationID(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationID) { // not required
		return nil
	}

	if err := validate.FormatOf("configurationId", "body", "uuid", m.ConfigurationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstallConfiguration) validateConfigurationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationStatus) { // not required
		return nil
	}

	if err := m.ConfigurationStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("configurationStatus")
		}
		return err
	}

	return nil
}

func (m *InstallConfiguration) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstallConfiguration) validateInstalledAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledAppID) { // not required
		return nil
	}

	if err := validate.FormatOf("installedAppId", "body", "uuid", m.InstalledAppID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstallConfiguration) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallConfiguration) UnmarshalBinary(b []byte) error {
	var res InstallConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
