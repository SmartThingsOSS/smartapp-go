// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InstallConfigurationStatus Denotes the current state of a configuration instance.  'STAGED' configuration is used during active
// modification to config.  A configuration is marked 'DONE' once it is deemed finished.  At this point it
// is immutable, meaning it can't be changed.  A status of 'AUTHORIZED' means the apps permissions have been
// authorized by the consumer.  Installed Apps in 'AUTHORIZED' state are fully installed and used by the
// SmartThings platform.  A status of 'REVOKED' means the apps permissions have been revoked.
//
// swagger:model InstallConfigurationStatus
type InstallConfigurationStatus string

const (

	// InstallConfigurationStatusSTAGED captures enum value "STAGED"
	InstallConfigurationStatusSTAGED InstallConfigurationStatus = "STAGED"

	// InstallConfigurationStatusDONE captures enum value "DONE"
	InstallConfigurationStatusDONE InstallConfigurationStatus = "DONE"

	// InstallConfigurationStatusAUTHORIZED captures enum value "AUTHORIZED"
	InstallConfigurationStatusAUTHORIZED InstallConfigurationStatus = "AUTHORIZED"

	// InstallConfigurationStatusREVOKED captures enum value "REVOKED"
	InstallConfigurationStatusREVOKED InstallConfigurationStatus = "REVOKED"
)

// for schema
var installConfigurationStatusEnum []interface{}

func init() {
	var res []InstallConfigurationStatus
	if err := json.Unmarshal([]byte(`["STAGED","DONE","AUTHORIZED","REVOKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		installConfigurationStatusEnum = append(installConfigurationStatusEnum, v)
	}
}

func (m InstallConfigurationStatus) validateInstallConfigurationStatusEnum(path, location string, value InstallConfigurationStatus) error {
	if err := validate.Enum(path, location, value, installConfigurationStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this install configuration status
func (m InstallConfigurationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInstallConfigurationStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
