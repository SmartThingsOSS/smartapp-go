// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstalledApp installed app
// swagger:model InstalledApp
type InstalledApp struct {

	// The ID of the app.
	AppID string `json:"appId,omitempty"`

	// A UTC ISO-8601 Date-Time String
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// A user defined name for the installed app.
	// Max Length: 64
	DisplayName string `json:"displayName,omitempty"`

	// The ID of the installed app.
	// Format: uuid
	InstalledAppID strfmt.UUID `json:"installedAppId,omitempty"`

	// installed app status
	InstalledAppStatus InstalledAppStatus `json:"installedAppStatus,omitempty"`

	// installed app type
	InstalledAppType InstalledAppType `json:"installedAppType,omitempty"`

	// A UTC ISO-8601 Date-Time String
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// The ID of the location to which the installed app may belong.
	// Format: uuid
	LocationID strfmt.UUID `json:"locationId,omitempty"`

	// owner
	Owner *Owner `json:"owner,omitempty"`

	// A reference to an upstream system.  For example, Behaviors would reference the behaviorId.
	//
	ReferenceID string `json:"referenceId,omitempty"`
}

// Validate validates this installed app
func (m *InstalledApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAppStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstalledApp) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstalledApp) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 64); err != nil {
		return err
	}

	return nil
}

func (m *InstalledApp) validateInstalledAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledAppID) { // not required
		return nil
	}

	if err := validate.FormatOf("installedAppId", "body", "uuid", m.InstalledAppID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstalledApp) validateInstalledAppStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledAppStatus) { // not required
		return nil
	}

	if err := m.InstalledAppStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("installedAppStatus")
		}
		return err
	}

	return nil
}

func (m *InstalledApp) validateInstalledAppType(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledAppType) { // not required
		return nil
	}

	if err := m.InstalledAppType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("installedAppType")
		}
		return err
	}

	return nil
}

func (m *InstalledApp) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstalledApp) validateLocationID(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("locationId", "body", "uuid", m.LocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstalledApp) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstalledApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstalledApp) UnmarshalBinary(b []byte) error {
	var res InstalledApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
