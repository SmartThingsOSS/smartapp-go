// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InstalledAppStatus Denotes the current state of an install.  'PENDING' is used during active modification to the install's config
// prior to 'AUTHORIZATION'. A status of 'AUTHORIZED' means the install's permissions have been authorized by the
// consumer. Installed Apps in 'AUTHORIZED' state are fully installed and usable by the SmartThings platform.  A
// status of 'REVOKED' means the install's permissions have been revoked.  A status of 'DISABLED' means a previously
// 'AUTHORIZED' Installed App will not execute.
//
// swagger:model InstalledAppStatus
type InstalledAppStatus string

const (

	// InstalledAppStatusPENDING captures enum value "PENDING"
	InstalledAppStatusPENDING InstalledAppStatus = "PENDING"

	// InstalledAppStatusAUTHORIZED captures enum value "AUTHORIZED"
	InstalledAppStatusAUTHORIZED InstalledAppStatus = "AUTHORIZED"

	// InstalledAppStatusREVOKED captures enum value "REVOKED"
	InstalledAppStatusREVOKED InstalledAppStatus = "REVOKED"

	// InstalledAppStatusDISABLED captures enum value "DISABLED"
	InstalledAppStatusDISABLED InstalledAppStatus = "DISABLED"
)

// for schema
var installedAppStatusEnum []interface{}

func init() {
	var res []InstalledAppStatus
	if err := json.Unmarshal([]byte(`["PENDING","AUTHORIZED","REVOKED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		installedAppStatusEnum = append(installedAppStatusEnum, v)
	}
}

func (m InstalledAppStatus) validateInstalledAppStatusEnum(path, location string, value InstalledAppStatus) error {
	if err := validate.Enum(path, location, value, installedAppStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this installed app status
func (m InstalledAppStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInstalledAppStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
