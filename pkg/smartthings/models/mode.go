// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Mode mode
// swagger:model Mode
type Mode struct {

	// Globally unique id for the mode.
	// Required: true
	ID *string `json:"id"`

	// A name provided by the User. Unique per location, updatable.
	// Required: true
	// Max Length: 25
	// Min Length: 1
	Label *string `json:"label"`

	// A name provided when the mode was created. The name is unique per location, and can not be updated.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this mode
func (m *Mode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Mode) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Mode) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	if err := validate.MinLength("label", "body", string(*m.Label), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("label", "body", string(*m.Label), 25); err != nil {
		return err
	}

	return nil
}

func (m *Mode) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Mode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Mode) UnmarshalBinary(b []byte) error {
	var res Mode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
