// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Owner A typed model which provides information around ownership of a specific domain.
// swagger:model Owner
type Owner struct {

	// A global idenfifier for owner.
	OwnerID string `json:"ownerId,omitempty"`

	// The account type which owns the specific domain item.
	// Enum: [USER]
	OwnerType *string `json:"ownerType,omitempty"`
}

// Validate validates this owner
func (m *Owner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ownerTypeOwnerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ownerTypeOwnerTypePropEnum = append(ownerTypeOwnerTypePropEnum, v)
	}
}

const (

	// OwnerOwnerTypeUSER captures enum value "USER"
	OwnerOwnerTypeUSER string = "USER"
)

// prop value enum
func (m *Owner) validateOwnerTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ownerTypeOwnerTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Owner) validateOwnerType(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnerTypeEnum("ownerType", "body", *m.OwnerType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Owner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Owner) UnmarshalBinary(b []byte) error {
	var res Owner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
