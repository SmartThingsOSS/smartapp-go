// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SceneSummary scene summary
// swagger:model SceneSummary
type SceneSummary struct {

	// Date-based version of the API with which the scene was created in format YYYYMMDD
	APIVersion string `json:"apiVersion,omitempty"`

	// The unique identifier of the backing behavior
	BehaviorID string `json:"behaviorId,omitempty"`

	// The unique identifier of the user that created the scene
	CreatedBy string `json:"createdBy,omitempty"`

	// The date the scene was created
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// Whether or not this scene can be edited by the logged in user using the version of the app that made the request
	Editable bool `json:"editable,omitempty"`

	// The date the scene was last executed
	// Format: date-time
	LastExecutedDate strfmt.DateTime `json:"lastExecutedDate,omitempty"`

	// The date the scene was last updated
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// Location of the Scene
	LocationID string `json:"locationId,omitempty"`

	// The color of the icon
	SceneColor string `json:"sceneColor,omitempty"`

	// The name of the icon
	SceneIcon string `json:"sceneIcon,omitempty"`

	// The unique identifier of the Scene
	SceneID string `json:"sceneId,omitempty"`

	// The user-defined name of the Scene
	SceneName string `json:"sceneName,omitempty"`
}

// Validate validates this scene summary
func (m *SceneSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecutedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SceneSummary) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SceneSummary) validateLastExecutedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastExecutedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastExecutedDate", "body", "date-time", m.LastExecutedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SceneSummary) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SceneSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SceneSummary) UnmarshalBinary(b []byte) error {
	var res SceneSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
