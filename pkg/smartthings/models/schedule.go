// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schedule schedule
// swagger:model Schedule
type Schedule struct {

	// cron
	Cron *CronSchedule `json:"cron,omitempty"`

	// The ID of the installed app.
	// Format: uuid
	InstalledAppID strfmt.UUID `json:"installedAppId,omitempty"`

	// The ID of the location the installed app is in.
	// Format: uuid
	LocationID strfmt.UUID `json:"locationId,omitempty"`

	// The unique per installed app name of the schedule.
	// Required: true
	// Max Length: 36
	// Min Length: 1
	Name *string `json:"name"`

	// list of scheduled execution times in millis from jan 1 1970 UTC
	ScheduledExecutions []int64 `json:"scheduledExecutions"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCron(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) validateCron(formats strfmt.Registry) error {

	if swag.IsZero(m.Cron) { // not required
		return nil
	}

	if m.Cron != nil {
		if err := m.Cron.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cron")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) validateInstalledAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstalledAppID) { // not required
		return nil
	}

	if err := validate.FormatOf("installedAppId", "body", "uuid", m.InstalledAppID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateLocationID(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("locationId", "body", "uuid", m.LocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 36); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schedule) UnmarshalBinary(b []byte) error {
	var res Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
