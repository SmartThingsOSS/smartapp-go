// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAppRequest update app request
// swagger:model UpdateAppRequest
type UpdateAppRequest struct {

	// app type
	// Required: true
	AppType AppType `json:"appType"`

	// A default description for an app.
	//
	// Required: true
	// Max Length: 250
	Description *string `json:"description"`

	// A default display name for an app.
	//
	// Required: true
	// Max Length: 75
	DisplayName *string `json:"displayName"`

	// icon image
	IconImage *IconImage `json:"iconImage,omitempty"`

	// lambda smart app
	LambdaSmartApp *CreateOrUpdateLambdaSmartAppRequest `json:"lambdaSmartApp,omitempty"`

	// Inform the installation systems that a particular app can only be installed once within a user's account.
	//
	SingleInstance *bool `json:"singleInstance,omitempty"`

	// webhook smart app
	WebhookSmartApp *CreateOrUpdateWebhookSmartAppRequest `json:"webhookSmartApp,omitempty"`
}

// Validate validates this update app request
func (m *UpdateAppRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLambdaSmartApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookSmartApp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAppRequest) validateAppType(formats strfmt.Registry) error {

	if err := m.AppType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appType")
		}
		return err
	}

	return nil
}

func (m *UpdateAppRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 250); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAppRequest) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(*m.DisplayName), 75); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAppRequest) validateIconImage(formats strfmt.Registry) error {

	if swag.IsZero(m.IconImage) { // not required
		return nil
	}

	if m.IconImage != nil {
		if err := m.IconImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iconImage")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAppRequest) validateLambdaSmartApp(formats strfmt.Registry) error {

	if swag.IsZero(m.LambdaSmartApp) { // not required
		return nil
	}

	if m.LambdaSmartApp != nil {
		if err := m.LambdaSmartApp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lambdaSmartApp")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAppRequest) validateWebhookSmartApp(formats strfmt.Registry) error {

	if swag.IsZero(m.WebhookSmartApp) { // not required
		return nil
	}

	if m.WebhookSmartApp != nil {
		if err := m.WebhookSmartApp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhookSmartApp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAppRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAppRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAppRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
