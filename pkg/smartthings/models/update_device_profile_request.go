// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceProfileRequest update device profile request
// swagger:model UpdateDeviceProfileRequest
type UpdateDeviceProfileRequest struct {

	// A list of `[ 1..10 ]` components for this profile.
	// Max Items: 10
	// Min Items: 1
	Components []*DeviceComponentReference `json:"components"`

	// metadata
	Metadata DeviceProfileMetadata `json:"metadata,omitempty"`
}

// Validate validates this update device profile request
func (m *UpdateDeviceProfileRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDeviceProfileRequest) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	iComponentsSize := int64(len(m.Components))

	if err := validate.MinItems("components", "body", iComponentsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("components", "body", iComponentsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateDeviceProfileRequest) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := m.Metadata.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metadata")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDeviceProfileRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDeviceProfileRequest) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceProfileRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
